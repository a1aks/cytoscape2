#!/usr/bin/env perl 
#------------------------------------------------------------------------
# $Revision$
# $Date$
# $Author$
#------------------------------------------------------------------------
# implicit main starts here

  $errorsFound = 0;

  checkJavaVersion ();
  checkJavaHome ();
  checkClassPath ();
 
  exit $errorsFound;

# end of implicit main
#-------------------------------------------------------------------------
sub checkCppUnit
{
  my $cppUnitHome = $ENV {'CPPUNIT_HOME'};
  if ((length $cppUnitHome) == 0) {
    printError ("CPPUNIT_HOME is undefined");
    }

  my $diagnosticCppUnitFile = $cppUnitHome . "/include/cppunit/TestSuite.h";
  my $fileIsReadable = -r $diagnosticCppUnitFile;
  if (!$fileIsReadable) {
    printError ("cannot read a representative CPPUNIT file:\n\t " .
                       $diagnosticCppUnitFile . 
                       "\ncheck value of CPPUNIT_HOME, currently: " . 
                       $cppUnitHome);
    }
  else {
    printSuccessMessage ("CPPUNIT_HOME okay");
    }
 
}# checkCppUnit
#-------------------------------------------------------------------------
sub checkLeda 
{
  my $ledaHome = $ENV {'LEDA_HOME'};
  if ((length $ledaHome) == 0) {
    printError ("LEDA_HOME is undefined");
    }

  my $diagnosticLedaFile = $ledaHome . "/incl/LEDA/graph.h";
  my $fileIsReadable = -r $diagnosticLedaFile;
  if (!$fileIsReadable) {
    printError ("cannot read a representative LEDA file:\n\t " .
                       $diagnosticLedaFile . 
                       "\ncheck value of LEDA_HOME, currently: " . 
                       $ledaHome);
    }
  else {
    printSuccessMessage ("LEDA_HOME okay");
    }
 
}# checkLeda
#-------------------------------------------------------------------------
sub checkJavaVersion
{
  my $requiredVersionString = "1.4.0";
  my $versionString = `java -version 2>&1 | grep $requiredVersionString`;
  my $lengthOfMessage = length $versionString;
  if ($lengthOfMessage > 0) {
    printSuccessMessage ("java version okay: $requiredVersionString");
    }
  else {
    printError ("java version must be $requiredVersionString");
    }

}# checkJavaVersion
#-------------------------------------------------------------------------
sub checkJavaHome
{
  my $javaHome = $ENV {'JAVA_HOME'};
  if ((length $javaHome) == 0) {
    printError ("JAVA_HOME is undefined");
    }

  my $diagnosticJavaFile = $javaHome . "/include/jni.h";
  my $fileIsReadable = -r $diagnosticJavaFile;
  if (!$fileIsReadable) {
    printError ("cannot read a representative Java file from JAVA_HOME:\n\t " .
                       $diagnosticJavaFile . 
                       "\ncheck value of JAVA_HOME, currently: " . 
                       $javaHome);
    }
  else {
    printSuccessMessage ("JAVA_HOME okay");
    }
 
}# checkJavaHome
#-------------------------------------------------------------------------
sub checkLdLibraryPath
{
  my $fullPath = $ENV {'LD_LIBRARY_PATH'};
  my @allPaths = split (/:/, $fullPath);


   # the following names are from LEDA and cppunit
   # make sure they can be found in the current LD_LIBRARY_PATH

  my $someProblemFindingLibraries = 0;  #be optimistic
  my $errorMessage = "";

  my @libNames = ("G", "L", "D3", "W", "P", "cppunit");

  foreach $lib (@libNames) {
    my $found = 0;
    foreach $path (@allPaths) {
      my $candidate = sprintf ("%s/lib%s.so", $path, $lib);
      if (-r $candidate) {
        $found = 1;
        }# if found
      }# foreach $path
    if (!$found) {
      $someProblemFindingLibraries = 1;
      $errorMessage .= 
             sprintf ("failed to find %s in LD_LIBRARY_PATH\n", $lib);
      } # if !found
    }# foreach $lib

  if ($someProblemFindingLibraries) {
    printError ($errorMessage . "Please check your LD_LIBRARY_PATH.");
    exit (1);
    }

  printSuccessMessage ("LD_LIBRARY_PATH okay");

}# checkLdLibraryPath
#-------------------------------------------------------------------------
sub checkClassPath
# many of the required jars are unpacked and then repacked into 
# aux.jar:
#
#   gnu utils
#   jdom
#   xerces
# 
# additionally, we need
#
#   y.jar
#   junit.jar
#
# finally, the directory which is the immediate parent of the current
# directory must be in the classpath
{
  my $fullPath = $ENV {'CLASSPATH'};
  my @allPaths = split (/:/, $fullPath);
  my $parentDirectory = getParentDirectory ();
  my $foundParentDirectory = 0;
  my $foundYFiles= 0;
  my $foundJunit = 0;

  my $classPathOK = 1;
  
  foreach $fullpath (@allPaths) {
    if ($fullpath eq $parentDirectory) {
      $foundParentDirectory = 1;
      }
    else {#  look for the expected jar files
      $fullpath =~ m/.*\/(.*\.jar)/;
      $jarFile = $1;
      if ($jarFile eq "junit.jar") {
        $foundJunit = 1;
        }
      elsif ($jarFile eq "y.jar") {
        $foundYFiles = 1;
        }
      }# else: looking for jar files
    }# foreach

  if (! $foundParentDirectory) {
    $classPathOK = 0;
    printError ($errorMessage . "parent directory is not in your CLASSPATH.")
    }
  if (! $foundYFiles) {
    $classPathOK = 0;
    printError ($errorMessage . "y.jar is not in your CLASSPATH.")
    }

  if (! $foundJunit) {
    $classPathOK = 0;
    printError ($errorMessage . "junit.jar is not in your CLASSPATH.")
    }

  if ($classPathOK) {
    printSuccessMessage ("CLASSPATH okay");
    }

}# checkLdLibraryPath
#-------------------------------------------------------------------------
sub getParentDirectory 
# needed for the classpath checker
{
  my $pwd = `"pwd"`;
  chop ($pwd);

  my @pwdInPieces = split ('/', $pwd);
  my $count = $#pwdInPieces + 1;

  #foreach $piece (@pwdInPieces) {
  #  print "pwd piece: $piece\n";
  #  }

  for ($i = 0; $i < $count-1; $i++) {
    $parentDirectory .= $pwdInPieces [$i] . "/";
    }

  chop ($parentDirectory);  # get rid of the trailing slash
 
  return $parentDirectory;

}# getParentDirectory
#-------------------------------------------------------------------------
sub printError 
{
  $errorsFound = 1;
  my $msg = $_[0];
  printf ("================== ERROR!\n%s\n", $msg);

}
#-------------------------------------------------------------------------
sub printSuccessMessage
{
  my $msg = $_[0];
  printf ("================== %s\n", $msg);

}
#-------------------------------------------------------------------------





  
