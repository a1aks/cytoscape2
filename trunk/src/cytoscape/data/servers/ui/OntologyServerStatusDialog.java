package cytoscape.data.servers.ui;

import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JDialog;
import javax.swing.JTextPane;

import cytoscape.Cytoscape;
import cytoscape.bookmarks.Attribute;
import cytoscape.bookmarks.Bookmarks;
import cytoscape.bookmarks.DataSource;
import cytoscape.data.servers.OntologyServer.OntologyType;
import cytoscape.task.Task;
import cytoscape.task.TaskMonitor;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.util.BookmarksUtil;

/*
 * OntologyServerStatusDialog.java
 *
 * Created on 2006/08/03, 14:53
 */

/**
 * 
 * @author kono
 */
public class OntologyServerStatusDialog extends JDialog {

	private static final String ONTOLOGY_CATEGORY = "ontology";

	private Bookmarks bookmarks;
	private OntologyTableModel ontologyModel;

	private Map<String, String> dataSourceMap;

	private Map<String, URL> statusMap;
	private Map<String, String> descriptionMap;
	private Map<String, String> typeMap;

	private static final String ADD_COMMAND = "Add new data source...";

	/** Creates new form OntologyServerStatusDialog */
	public OntologyServerStatusDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		getStatus();
	}

	private void getStatus() {
		statusMap = Cytoscape.getOntologyServer().getOntologySources();
		descriptionMap = new HashMap<String, String>();
		dataSourceMap = new HashMap<String, String>();
		typeMap = new HashMap<String, String>();

		bookmarks = Cytoscape.getOntologyServer().getBookmarks();

		List<DataSource> dataSources = BookmarksUtil.getDataSourceList(
				ONTOLOGY_CATEGORY, bookmarks.getCategory());
		for (DataSource source : dataSources) {
			dataSourceMap.put(source.getName(), source.getHref());
			List<Attribute> attributes = source.getAttribute();
			if (attributes != null) {
				for (Attribute attr : attributes) {
					if (attr.getName().equals("description")) {
						descriptionMap.put(source.getName(), attr.getContent());
					} else if (attr.getName().equals("ontologyType")) {
						typeMap.put(source.getName(), attr.getContent());
					}
				}
			}
			bookmarkComboBox.addItem(source.getName());
		}

		bookmarkComboBox.addItem("--------------------------");
		bookmarkComboBox.addItem(ADD_COMMAND);

		for (String key : statusMap.keySet()) {
			ontologyModel.addEntry(key, statusMap.get(key).toString());
		}

		descriptionEditorPane.setText(descriptionMap.get(bookmarkComboBox
				.getSelectedItem()));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {

		titleLabel = new javax.swing.JLabel();
		ontologyScrollPane = new javax.swing.JScrollPane();
		ontologyTable = new javax.swing.JTable();
		jSeparator1 = new javax.swing.JSeparator();
		bookmarkComboBox = new javax.swing.JComboBox();
		okButton = new javax.swing.JButton();
		importButton = new javax.swing.JButton();
		bookmarkLabel = new javax.swing.JLabel();

		descriptionScrollPane = new javax.swing.JScrollPane();
		descriptionEditorPane = new JTextPane();

		bookmarkPanel = new javax.swing.JPanel();

		removeButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Ontology Server Status");
		titleLabel.setText("Ontology Server Status");

		ontologyModel = new OntologyTableModel();

		ontologyTable.setModel(ontologyModel);
		ontologyScrollPane.setViewportView(ontologyTable);

		bookmarkComboBox.setModel(new javax.swing.DefaultComboBoxModel());
		bookmarkComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bookmarkComboBoxActionPerformed(evt);
			}
		});

		okButton.setText("OK");
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		descriptionScrollPane.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Description"));
		descriptionEditorPane.setBackground(new java.awt.Color(238, 238, 238));
		descriptionEditorPane.setEditable(false);
		descriptionEditorPane.setFont(new java.awt.Font("Serif", 0, 12));
		descriptionScrollPane.setViewportView(descriptionEditorPane);

		bookmarkPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Bookmarks"));

		importButton.setText("Import");
		importButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				importButtonActionPerformed(evt);
			}
		});

		removeButton.setText("Remove");
		removeButton.setEnabled(false);
		removeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeButtonActionPerformed(evt);
			}
		});

		bookmarkLabel.setText("Bookmark");

		org.jdesktop.layout.GroupLayout bookmarkPanelLayout = new org.jdesktop.layout.GroupLayout(
				bookmarkPanel);
		bookmarkPanel.setLayout(bookmarkPanelLayout);
		bookmarkPanelLayout
				.setHorizontalGroup(bookmarkPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(bookmarkComboBox, 0, 366, Short.MAX_VALUE)
						.add(
								org.jdesktop.layout.GroupLayout.TRAILING,
								bookmarkPanelLayout
										.createSequentialGroup()
										.add(201, 201, 201)
										.add(removeButton)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												importButton,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												76,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
		bookmarkPanelLayout
				.setVerticalGroup(bookmarkPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								bookmarkPanelLayout
										.createSequentialGroup()
										.add(
												bookmarkComboBox,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												bookmarkPanelLayout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(importButton).add(
																removeButton))));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().addContainerGap().add(
						layout.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING).add(
								descriptionScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								376, Short.MAX_VALUE).add(bookmarkPanel,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).add(jSeparator1,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								376, Short.MAX_VALUE).add(ontologyScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								376, Short.MAX_VALUE).add(titleLabel).add(
								org.jdesktop.layout.GroupLayout.TRAILING,
								okButton)).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().addContainerGap()
						.add(titleLabel).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								jSeparator1,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								2,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								ontologyScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								120, Short.MAX_VALUE).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								bookmarkPanel,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								descriptionScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								117, Short.MAX_VALUE).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								okButton).addContainerGap()));

		pack();
	}// </editor-fold>

	private void bookmarkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
		String selectedItem = (String) bookmarkComboBox.getSelectedItem();
		if (selectedItem.equals(ADD_COMMAND)) {

			OntologySourceSelectDialog ossd = new OntologySourceSelectDialog(
					Cytoscape.getDesktop(), true);
			ossd.setLocationRelativeTo(Cytoscape.getDesktop());
			ossd.setVisible(true);

			if (ossd.getSourceName() != null) {
				bookmarkComboBox.insertItemAt(ossd.getSourceName(), 0);
				dataSourceMap.put(ossd.getSourceName(), ossd
						.getSourceUrlString());
			}
			return;
		}

		bookmarkComboBox.setToolTipText(bookmarkComboBox.getSelectedItem()
				.toString());

		descriptionEditorPane.setText(descriptionMap.get(bookmarkComboBox
				.getSelectedItem()));
	}

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		this.dispose();
	}

	private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {
		String selectedItem = (String) bookmarkComboBox.getSelectedItem();

		if (selectedItem.equals(ADD_COMMAND)) {
			return;
		}
		loadFile(
				(String) dataSourceMap.get(bookmarkComboBox.getSelectedItem()),
				(String) bookmarkComboBox.getSelectedItem());
		ontologyModel.addEntry((String) bookmarkComboBox.getSelectedItem(),
				(String) dataSourceMap.get(bookmarkComboBox.getSelectedItem()));
	}

	private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	// Variables declaration - do not modify
	private javax.swing.JComboBox bookmarkComboBox;
	private javax.swing.JLabel bookmarkLabel;
	private javax.swing.JButton importButton;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JButton okButton;
	private javax.swing.JScrollPane ontologyScrollPane;
	private javax.swing.JTable ontologyTable;
	private javax.swing.JLabel titleLabel;
	private javax.swing.JPanel bookmarkPanel;
	private javax.swing.JTextPane descriptionEditorPane;
	private javax.swing.JScrollPane descriptionScrollPane;
	private javax.swing.JButton removeButton;

	// End of variables declaration

	private void loadFile(String dataSource, String ontologyName) {
		// Create LoadNetwork Task
		ImportOntologyTask task = new ImportOntologyTask(dataSource, typeMap
				.get(ontologyName), ontologyName, descriptionMap
				.get(ontologyName));

		// Configure JTask Dialog Pop-Up Box
		JTaskConfig jTaskConfig = new JTaskConfig();
		jTaskConfig.setOwner(Cytoscape.getDesktop());
		jTaskConfig.displayCloseButton(true);
		jTaskConfig.displayStatus(true);
		jTaskConfig.setAutoDispose(false);

		// Execute Task in New Thread; pops open JTask Dialog Box.
		TaskManager.executeTask(task, jTaskConfig);
	}
}

/**
 * Task to Load New Network Data.
 */
class ImportOntologyTask implements Task {
	private String dataSource;
	private String ontologyType;
	private String ontologyName;
	private String ontologyDescription;

	private TaskMonitor taskMonitor;

	/**
	 * Constructor.
	 * 
	 * @param file
	 *            File.
	 * @param fileType
	 *            FileType, e.g. Cytoscape.FILE_SIF or Cytoscape.FILE_GML.
	 */

	public ImportOntologyTask(String dataSource, String type, String name,
			String description) {
		this.dataSource = dataSource;
		this.ontologyType = type;
		this.ontologyName = name;
		this.ontologyDescription = description;
	}

	/**
	 * Executes Task.
	 */
	public void run() {
		taskMonitor.setStatus("Importing Ontology Data...");

		try {
			URL targetUrl = new URL(dataSource);
			taskMonitor.setPercentCompleted(-1);
			
			if(ontologyType == null) {
				Cytoscape.getOntologyServer().addOntology(targetUrl,
						OntologyType.BASIC, ontologyName, ontologyDescription);
			} else if (ontologyType.equals(OntologyType.GO.toString())) {
				Cytoscape.getOntologyServer().addOntology(targetUrl,
						OntologyType.GO, ontologyName, ontologyDescription);
			}

			if (Cytoscape.getOntologyServer().getOntologies().get(ontologyName) != null) {
				informUserOfOntologyStats(ontologyName, targetUrl);
			} else {
				StringBuffer sb = new StringBuffer();
				sb.append("Could not load ontology from the data source: "
						+ targetUrl.toString());
				sb
						.append("\nThis URL may not contain the correct ontology data.");
				taskMonitor.setException(new IOException(sb.toString()), sb
						.toString());
			}
			taskMonitor.setPercentCompleted(100);

		} catch (Exception e) {
			taskMonitor.setException(e, "Unable to load ontology data.");
		}
	}

	/**
	 * Inform User of Network Stats.
	 */
	// Mod. by Kei 08/26/2005
	//
	// For the new GML format import function, added some messages
	// for the users.
	//
	private void informUserOfOntologyStats(String ontologyName, URL source) {

		StringBuffer sb = new StringBuffer();

		// Give the user some confirmation
		sb.append("Succesfully loaded ontology from:  " + source.toString());
		sb.append("\n\nNetwork contains ");

		taskMonitor.setStatus(sb.toString());
	}

	/**
	 * Halts the Task: Not Currently Implemented.
	 */
	public void halt() {
		// Task can not currently be halted.
	}

	/**
	 * Sets the Task Monitor.
	 * 
	 * @param taskMonitor
	 *            TaskMonitor Object.
	 */
	public void setTaskMonitor(TaskMonitor taskMonitor)
			throws IllegalThreadStateException {
		this.taskMonitor = taskMonitor;
	}

	/**
	 * Gets the Task Title.
	 * 
	 * @return Task Title.
	 */
	public String getTitle() {
		return new String("Loading Ontology");
	}

}
