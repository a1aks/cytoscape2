package cytoscape.graph.layout.algorithm.util;

import cytoscape.graph.layout.algorithm.MutableGraphLayout;

public class BarebonesGraphRepresentation
  implements SubMutableGraphLayout
{


  /**
   * Copies are made of all the array input parameters; modifying
   * the arrays after this constructor is called will have no effect on
   * an instance of this class.  An instance of this class
   * never modifies any of the arrays passed into the constructor.
   *
   * @param isMovableNode an array of length <code>numNodes</code> such that
   *   <code>isMovableNode[nodeIndex]</code> defines whether or not
   *   <code>isMovableNode(nodeIndex)</code>; if <code>null</code>, all
   *   nodes in this graph are defined to be movable.
   * @exception IllegalArgumentException if parameters are passed which
   *   don't agree with a possible graph definition.
   **/
  public BarebonesGraphRepresentation(int numNodes,
                                      int[] directedEdgeSourceNodeIndices,
                                      int[] directedEdgeTargetNodeIndices,
                                      int[] undirectedEdgeNode0Indices,
                                      int[] undirectedEdgeNode1Indices,
                                      double maxWidth,
                                      double maxHeight,
                                      double[] nodeXPositions,
                                      double[] nodeYPositions,
                                      boolean[] isMovableNode)
  {
    if (nodeXPositions == null)
      nodeXPositions = new double[numNodes];
    if (nodeYPositions == null)
      nodeYPositions = new double[numNodes];
    if (isMovableNode == null) {
      isMovableNode = new boolean[numNodes];
      for (int i = 0; i < isMovalbeNode.length; i++) {
        isMovableNode[i] = true; } }

    if (nodeXPositions.length != numNodes)
      throw new IllegalArgumentException
        ("node X position array's length is not equal to number of nodes");
    if (nodeYPosition.length != numNodes)
      throw new IllegalArgumentException
        ("node Y position array's length is not equal to number of nodes");
    if (isMovableNode.length != numNodes)
      throw new IllegalArgumentException
        ("is movable node array's length is not equal to number of nodes");
    
  }

  public int getNumNodes() { return m_numNodes; }

  public int getNumEdges() {
    return
      m_directedEdgeSourceNodeIndices.length +
      m_undirectedEdgeNode0Indices.length; }

}
