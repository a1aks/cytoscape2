package cytoscape.visual.ui;

import cytoscape.Cytoscape;

import cytoscape.visual.VisualPropertyType;

import cytoscape.visual.mappings.ContinuousMapping;
import cytoscape.visual.mappings.ObjectMapping;

import org.jdesktop.swingx.JXGradientChooser;
import org.jdesktop.swingx.JXMultiThumbSlider;
import org.jdesktop.swingx.color.ColorUtil;
import org.jdesktop.swingx.color.GradientTrackRenderer;
import org.jdesktop.swingx.multislider.Thumb;
import org.jdesktop.swingx.multislider.ThumbRenderer;
import org.jdesktop.swingx.multislider.TrackRenderer;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

import java.io.File;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.imageio.ImageIO;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/*
 * ContinuousMapperEditorPanel.java
 *
 * Created on 2007/02/15, 10:32
 */

/**
 *
 * @author  kono
 */

/**
 *
 * @author kono
 */
public class ContinuousMapperEditorPanel3 extends javax.swing.JPanel {
    /** Creates new form ContinuousMapperEditorPanel */
    public ContinuousMapperEditorPanel3() {
        initComponents();
        setSlider();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();

        jLabel3 = new javax.swing.JLabel();
        jLabel3.setText("Associated Visual Property: Node Shape");

        slider = new org.jdesktop.swingx.JXMultiThumbSlider();

        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        // iconPanel = new IconPanel();

        // iconPanel.setSize(100, 400);
        iconPanel = new JPanel();

        jPanel2.setBorder(
            javax.swing.BorderFactory.createTitledBorder(
                null,
                "Range Setting",
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("SansSerif", 1, 12),
                new java.awt.Color(102, 102, 102)));
        jLabel1.setText("Pivot");

        jButton1.setText("Add");

        jButton2.setText("Delete");

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Value");
        jButton3.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                jPanel2Layout.createSequentialGroup().addContainerGap().add(
                    jPanel2Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING, false).add(jLabel1).add(jButton2,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE).add(jButton1,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE).add(jSpinner1)).addContainerGap(28,
                    Short.MAX_VALUE)));
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                jPanel2Layout.createSequentialGroup().add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jSpinner1,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jButton1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jButton2).addContainerGap(235,
                    Short.MAX_VALUE)));

        jPanel1.setBorder(
            javax.swing.BorderFactory.createTitledBorder(
                null,
                "Range Editor",
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("SansSerif", 1, 11)));
        slider.setMaximumValue(100.0F);

        org.jdesktop.layout.GroupLayout sliderLayout = new org.jdesktop.layout.GroupLayout(slider);
        slider.setLayout(sliderLayout);
        sliderLayout.setHorizontalGroup(
            sliderLayout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 355,
                Short.MAX_VALUE));
        sliderLayout.setVerticalGroup(
            sliderLayout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 218,
                Short.MAX_VALUE));

        jLabel2.setText("Attribute Name");

        jComboBox1.setModel(
            new javax.swing.DefaultComboBoxModel(
                new String[] { "gal3RG", "Item 2", "Item 3", "Item 4" }));

        org.jdesktop.layout.GroupLayout iconPanelLayout = new org.jdesktop.layout.GroupLayout(iconPanel);
        iconPanel.setLayout(iconPanelLayout);
        iconPanelLayout.setHorizontalGroup(
            iconPanelLayout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 1,
                Short.MAX_VALUE));
        //		
        // iconPanelLayout.setHorizontalGroup(iconPanelLayout.createParallelGroup(
        // org.jdesktop.layout.GroupLayout.LEADING).add(0, 50,
        // Short.MAX_VALUE));
        iconPanelLayout.setVerticalGroup(
            iconPanelLayout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 230,
                Short.MAX_VALUE));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                jPanel1Layout.createSequentialGroup().add(
                    jPanel1Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING).add(
                        jPanel1Layout.createSequentialGroup().addContainerGap().add(jLabel2).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jComboBox1,
                            0, 229, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel3)).add(
                        jPanel1Layout.createSequentialGroup().add(iconPanel,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(slider,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 511,
                            Short.MAX_VALUE))).addContainerGap()));
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                jPanel1Layout.createSequentialGroup().add(
                    jPanel1Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(jLabel3).add(jComboBox1,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(
                    jPanel1Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING).add(
                        jPanel1Layout.createSequentialGroup().add(slider,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 152,
                            Short.MAX_VALUE).add(12, 12, 12)).add(iconPanel,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE))));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().add(jPanel1,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel2,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(jPanel2,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    } // </editor-fold>

    // Variables declaration - do not modify
    // private IconPanel iconPanel;
    private JPanel iconPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinner1;
    private org.jdesktop.swingx.JXMultiThumbSlider slider;

    // End of variables declaration
    private void setSlider() {
        Dimension dim = new Dimension(600, 200);
        setPreferredSize(dim);
        setSize(dim);
        setMinimumSize(new Dimension(300, 200));
        slider.updateUI();

        slider.addMouseMotionListener(
            new MouseMotionListener() {
                public void mouseDragged(MouseEvent arg0) {
                }

                public void mouseMoved(MouseEvent arg0) {
                    //				slider.setToolTipText((((VizMapperTrackRenderer) slider
                    //						.getTrackRenderer())).getToolTipForCurrentLocation(arg0
                    //						.getX(), arg0.getY()));
                }
            });

        slider.addMouseListener(
            new MouseListener() {
                public void mouseClicked(MouseEvent e) {
                    //				Image icon = (Image) ((VizMapperTrackRenderer) slider
                    //						.getTrackRenderer()).getObjectInRange(e.getX(), e
                    //						.getY());
                    //				if (icon != null && e.getClickCount() == 2) {
                    //					JOptionPane.showMessageDialog(slider,
                    //							"Icon selection dialog will be displayed here.!",
                    //							"Select icon", JOptionPane.INFORMATION_MESSAGE);
                    //				}
                }

                public void mouseEntered(MouseEvent e) {
                    // TODO Auto-generated method stub
                }

                public void mouseExited(MouseEvent e) {
                    // TODO Auto-generated method stub
                }

                public void mousePressed(MouseEvent e) {
                    // TODO Auto-generated method stub
                }

                public void mouseReleased(MouseEvent e) {
                    // TODO Auto-generated method stub
                }
            });

        List obj = new ArrayList();
        obj.add(Color.red);
        obj.add(Color.green);

        //		 slider.getModel().addThumb(10.0f, 15f);
        //		 slider.getModel().addThumb(20.0f, 50f);
        //		 slider.getModel().addThumb(40.0f, 100f);
        //		 slider.getModel().addThumb(80.0f, 75f);
        // slider.getModel().addThumb(15.0f, 15f);
        // slider.getModel().addThumb(25.0f, 55f);
        // slider.getModel().addThumb(45.0f, 90f);
        // slider.getModel().addThumb(85.0f, 45f);
        Image icon1;
        Image icon2;
        Image icon3;
        Image icon4;
        Image icon5;

        try {
            icon1 = ImageIO.read(
                    new File(
                        "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/round_rect.jpg"));
            icon2 = ImageIO.read(
                    new File(
                        "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/triangle.jpg"));
            icon3 = ImageIO.read(
                    new File(
                        "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/ellipse.jpg"));
            icon4 = ImageIO.read(
                    new File(
                        "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/octagon.jpg"));
            icon5 = ImageIO.read(
                    new File(
                        "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/diamond.jpg"));
        } catch (Exception e) {
            e.printStackTrace();
            icon1 = null;
            icon2 = null;
            icon3 = null;
            icon4 = null;
            icon5 = null;
        }

        //		slider.getModel().addThumb(10.0f, icon1);
        //		slider.getModel().addThumb(20.0f, icon2);
        //		slider.getModel().addThumb(40.0f, icon3);
        //		slider.getModel().addThumb(80.0f, icon4);
        slider.getModel()
              .addThumb(10.0f, Color.red);
        slider.getModel()
              .addThumb(20.0f, Color.black);
        slider.getModel()
              .addThumb(40.0f, Color.white);
        slider.getModel()
              .addThumb(80.0f, Color.green);

        TriangleThumbRenderer thumbRend = new TriangleThumbRenderer(slider);

        // IconTrackRenderer trackrend = new IconTrackRenderer(-5.2, 4.3);
        // ContinuousMapping mapping = (ContinuousMapping)
        // Cytoscape.getVisualMappingManager()
        // .getVisualStyle().getNodeAppearanceCalculator().getCalculator(
        // VisualPropertyType.NODE_SHAPE).getMapping(0);
        System.out.println("--------- VS = " +
            Cytoscape.getVisualMappingManager().getVisualStyle().getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SHAPE) +
            " ----");

        DiscreteTrackRenderer dRend = new DiscreteTrackRenderer(-5.2, 4.3,
                icon5, null);
        ContinuousTrackRenderer cRend = new ContinuousTrackRenderer(-3, 5);

        JXGradientChooser chooser = new JXGradientChooser();
        slider.setThumbRenderer(thumbRend);
        slider.setTrackRenderer(cRend);

        //		 slider = chooser.getSlider();
        //		 slider.setTrackRenderer(new GradientTrackRenderer(chooser));
    }

    class IconThumbRenderer extends JComponent
        implements ThumbRenderer {
        // private final JXGradientChooser gradientPicker;
        private JXMultiThumbSlider slider;
        private ImageIcon thumb_black;
        private ImageIcon thumb_gray;
        private List list;
        Image thumb;

        public IconThumbRenderer(List<Object> objList, JXMultiThumbSlider slider) {
            super();
            // this.gradientPicker = gradientPicker;
            this.slider = slider;

            this.list = objList;

            try {
                thumb = ImageIO.read(
                        new File(
                            "/cellar/users/kono/workspace/cytoscape25Mock/images/icon100.png"));
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
                ex.printStackTrace();
            }

            Dimension dim = new Dimension(160, 160);

            setSize(dim);
            setMinimumSize(dim);
            setPreferredSize(dim);
            setMaximumSize(dim);

            setBackground(Color.white);

            // try {
            // thumb_black = new ImageIcon();
            //
            // // thumb_black =
            // // ImageIO.read(this.getClass().getResourceAsStream(
            // // "/icons/thumb_black.png"));
            // // thumb_gray =
            // // ImageIO.read(this.getClass().getResourceAsStream(
            // // "/icons/thumb_gray.png"));
            // } catch (Exception ex) {
            // ex.printStackTrace();
            // }
        }

        private boolean selected;

        protected void paintComponent(Graphics g) {
            ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

            Polygon poly = new Polygon();

            poly.addPoint(0, 0);
            poly.addPoint(10, 0);
            poly.addPoint(5, 10);
            g.fillPolygon(poly);

            // JComponent thumb = this;
            // thumb.setPreferredSize(new Dimension(160, 160));
            // // int w = thumb.getWidth();
            // // g.setColor(getForeground());
            // // g.fillRect(0, 0, w - 1, w - 1);
            //
            // // g.drawOval(0, 0, 40, 50);
            // g.fillOval(0, 0, 30, 40);
            //
            // // if (selected) {
            // // g.
            // // //g.drawImage(thumb_black, 0, 0, null);
            // // } else {
            // // g.draw3DRect(15, 25, 45, 25, true);
            // // //g.drawImage(thumb_gray, 0, 0, null);
            // // }
        }

        public JComponent getThumbRendererComponent(JXMultiThumbSlider slider,
            int index, boolean selected) {
            // Color c = (Color) list.get(index);
            this.selected = selected;

            Color selectedColor = Color.red;

            if (selected)
                this.setForeground(selectedColor);
            else
                this.setForeground(Color.DARK_GRAY);

            return this;
        }
    } // end of internal class

    class IconTrackRenderer extends JComponent
        implements TrackRenderer {
        private Paint checker_paint;

        // private final JXGradientChooser gradientPicker;

        /*
         * Constants for diagram.
         */
        private static final int barHeight = 200;
        private static final int thumb_width = 12;
        private final Font defFont = new Font("SansSerif", Font.BOLD, 12);
        private static final int stringPosition = barHeight + 20;
        private double valueRange;
        private double minValue;
        private double maxValue;
        private BufferedImage icon1 = null;
        private BufferedImage icon2 = null;
        private BufferedImage icon3 = null;

        public IconTrackRenderer(double minValue, double maxValue) {
            System.out.println("++++++++++++++++ " + this.getParent());
            this.minValue = minValue;
            this.maxValue = maxValue;

            valueRange = Math.abs(maxValue - minValue);
            // this.gradientPicker = gradientPicker;
            checker_paint = ColorUtil.getCheckerPaint();

            try {
                icon1 = ImageIO.read(
                        new File(
                            "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/round_rect.jpg"));
                icon2 = ImageIO.read(
                        new File(
                            "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/triangle.jpg"));
                icon3 = ImageIO.read(
                        new File(
                            "/cellar/users/kono/workspace/cytoscape25Mock/src/cytoscape/visual/ui/images/ellipse.jpg"));
            } catch (Exception e) {
                e.printStackTrace();
                icon1 = null;
            }
        }

        private JXMultiThumbSlider slider;

        public void paint(Graphics g) {
            super.paint(g);
            paintComponent(g);
        }

        /**
         * Rendering slider bar.
         */
        protected void paintComponent(Graphics gfx) {
            // AA on
            Graphics2D g = (Graphics2D) gfx;
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

            // get the list of tumbs
            List<Thumb> stops = slider.getModel()
                                      .getSortedThumbs();
            int numPoints = stops.size();

            // set up the data for the gradient
            float[] fractions = new float[numPoints];
            Float[] floatProperty = new Float[numPoints];
            int i = 0;

            float min = 0;
            float max = 0;

            for (Thumb thumb : stops) {
                floatProperty[i] = (Float) thumb.getObject();
                fractions[i] = thumb.getPosition();

                if (min >= floatProperty[i])
                    min = floatProperty[i];

                if (max <= floatProperty[i])
                    max = floatProperty[i];

                i++;
            }

            // calculate the track area
            int track_width = slider.getWidth() - thumb_width;

            g.translate(thumb_width / 2, 12);

            // fill in the checker
            // g.setPaint(checker_paint);
            // g.fill(rect);

            // draw a border
            // line1.setLine(start, end);
            // g.setColor(Color.black);
            // g.setStroke(new BasicStroke(3.0f));
            // g.draw(line1);
            g.setStroke(new BasicStroke(3.0f));
            g.drawLine(-10, 0, -10, barHeight);

            g.setColor(Color.DARK_GRAY);
            g.setFont(defFont);
            g.drawString("Min=" + minValue, 0, barHeight + 50);
            g.drawString("Max=" + maxValue, track_width - 50, barHeight + 50);

            Point2D p1 = new Point2D.Float(0, 5);
            Point2D p2 = new Point2D.Float(0, 5);

            int newX = 0;
            System.out.println("#### Width = " + track_width);

            Line2D segment = new Line2D.Float();
            Rectangle2D rect1 = new Rectangle(0, 0, track_width, 5);
            int lastY = 0;

            g.setFont(new Font("SansSerif", Font.BOLD, 18));
            g.setStroke(new BasicStroke(1.0f));

            g.drawLine(0, barHeight + 60, track_width, barHeight + 60);

            Polygon arrow = new Polygon();
            arrow.addPoint(track_width, barHeight + 60);
            arrow.addPoint(track_width - 15, barHeight + 70);
            arrow.addPoint(track_width - 15, barHeight + 60);
            g.fill(arrow);

            // g.drawLine(0, barHeight+55, 0, barHeight+60);
            // g.drawLine(track_width, barHeight+55, track_width, barHeight+60);
            g.drawString("Node Attribute: gal3RG", (track_width / 2) - 100,
                barHeight + 100);

            for (i = 0; i < floatProperty.length; i++) {
                newX = (int) (track_width * (fractions[i] / 100));
                System.out.println("X = " + newX);
                p2.setLocation(newX, 5);
                g.setColor(Color.black);
                g.setStroke(new BasicStroke(1.0f));
                rect1 = new Rectangle((int) p1.getX(), 5, newX, barHeight);
                segment.setLine(p1, p2);
                g.draw(rect1);
                // g.setColor(new Color(255, 255, 255, 100));
                g.setColor(Color.white);
                // g.fill(rect1);

                // g.setColor(Color.blue);
                // int newY = (5 + barHeight)
                // - (int) ((floatProperty[i].intValue() / max) * barHeight);
                // if (i == 0) {
                // g.drawLine((int) p1.getX(), newY, newX, newY);
                // } else {
                // g.drawLine((int) p1.getX(), lastY, newX, newY);
                // }
                // lastY = newY;

                // g.setColor(Color.black);
                // g.setStroke(new BasicStroke(1.0f));
                //
                // if (fractions[i] < 10) {
                // g.drawLine(newX, newY, newX + 25, newY - 35);
                // g.setColor(Color.blue);
                // g.setFont(new Font("SansSerif", Font.BOLD, 12));
                //
                // g.drawString(floatProperty[i].toString(), newX + 40,
                // newY - 48);
                // } else {
                // g.drawLine(newX, newY, newX - 25, newY + 35);
                // g.setColor(Color.blue);
                // g.setFont(new Font("SansSerif", Font.BOLD, 12));
                // g.drawString(floatProperty[i].toString(), newX - 40,
                // newY + 48);
                // }
                // g.drawLine(newX-20, newY-25, newX-40, newY-25);
                g.setColor(Color.red);
                g.fillOval(newX - 5, (barHeight + 60) - 5, 10, 10);
                g.setFont(new Font("SansSerif", Font.BOLD, 12));

                g.drawString(
                    Float.toString(
                        ((Double) (((fractions[i] / 100) * valueRange) -
                        Math.abs(minValue))).floatValue()),
                    newX - 10,
                    barHeight + 78);

                int iconLoc = newX - ((newX - (int) p1.getX()) / 2) - 20;
                int iconY = (barHeight / 2) + 5;

                if ((i == 0) || (i == 2))
                    g.drawImage(icon1, iconLoc, iconY, this);
                else if ((i == 1) || (i == 3))
                    g.drawImage(icon2, iconLoc, iconY, this);
                else
                    g.drawImage(icon3, iconLoc, iconY, this);

                p1.setLocation(p2);
            }

            p2.setLocation(track_width, 5);

            rect1 = new Rectangle((int) p1.getX(), 5,
                    track_width - (thumb_width / 2), barHeight);
            // segment.setLine(p1, p2);
            g.setStroke(new BasicStroke(3.0f));
            g.setColor(Color.black);
            g.draw(rect1);
            g.setColor(Color.white);
            g.fill(rect1);
            g.drawImage(icon3, (int) p1.getX() + 50, (barHeight / 2) + 5, this);

            // g.setColor(Color.blue);
            // g.drawLine((int) p1.getX(), lastY, track_width, lastY);
            // g.setColor(Color.black);
            // g.draw(rect);
            g.translate(-thumb_width / 2, -thumb_width);
        }

        public JComponent getRendererComponent(JXMultiThumbSlider slider) {
            this.slider = slider;

            return this;
        }

        protected List getRanges() {
            List range = new ArrayList();

            return range;
        }

        protected String getToolTipForCurrentPosition() {
            return "AAAAAAAAA";
        }
    }
}
