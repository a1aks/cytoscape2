package cytoscape.visual.ui;

import cytoscape.Cytoscape;

import cytoscape.visual.VisualPropertyType;
import cytoscape.visual.VisualProperty;

import cytoscape.visual.ui.icon.VisualPropertyIcon;

import org.jdesktop.swingx.border.DropShadowBorder;
import org.jdesktop.swingx.painter.gradient.BasicGradientPainter;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.geom.Point2D;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;


/*
 * ValueSelectDialog.java
 *
 * Created on 2007/02/27, 10:51
 */

/**
 *
 * @author kono
 */
public class ValueSelectDialog extends javax.swing.JDialog {
    private final VisualPropertyType type;
    private Map shapeMap;
    private List orderedKeyList;

    /**
     * Static method to show dialog and get a value from user.
     *
     * @param type
     * @param parent
     * @return
     */
    public static Object showDialog(VisualPropertyType type, JDialog parent) {
        final ValueSelectDialog dialog = new ValueSelectDialog(type, parent,
                true);
        dialog.setVisible(true);

        return dialog.getValue();
    }

    private ValueSelectDialog(VisualPropertyType type, JDialog parent,
        boolean modal) {
        super(
            Cytoscape.getDesktop(),
            modal);
        this.type = type;
        shapeMap = this.type.getVisualProperty().getIconSet();
        initComponents();

        setList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        mainPanel = new org.jdesktop.swingx.JXTitledPanel();
        iconListScrollPane = new javax.swing.JScrollPane();
        iconList = new javax.swing.JList();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Value");
        mainPanel.setTitlePainter(
            new BasicGradientPainter(
                new Point2D.Double(.2d, 0),
                new Color(
                    Color.gray.getRed(),
                    Color.gray.getGreen(),
                    Color.gray.getBlue(),
                    100),
                new Point2D.Double(.8d, 0),
                Color.WHITE));
        mainPanel.setTitle(type.getName());
        mainPanel.setTitleFont(new java.awt.Font("SansSerif", 1, 14));

        iconList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        iconListScrollPane.setViewportView(iconList);

        applyButton.setText("Apply");
        applyButton.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    applyButtonActionPerformed(evt);
                }
            });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cancelButtonActionPerformed(evt);
                }
            });

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(
                mainPanel.getContentContainer());
        mainPanel.getContentContainer()
                 .setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                org.jdesktop.layout.GroupLayout.TRAILING,
                mainPanelLayout.createSequentialGroup().addContainerGap(128,
                    Short.MAX_VALUE).add(cancelButton).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(applyButton).addContainerGap()).add(iconListScrollPane,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291,
                Short.MAX_VALUE));
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                org.jdesktop.layout.GroupLayout.TRAILING,
                mainPanelLayout.createSequentialGroup().add(iconListScrollPane,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312,
                    Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(
                    mainPanelLayout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE).add(applyButton).add(cancelButton)).addContainerGap()));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
                getContentPane());
        getContentPane()
            .setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(mainPanel,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(mainPanel,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        pack();
    } // </editor-fold>

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    // Variables declaration - do not modify
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList iconList;
    private javax.swing.JScrollPane iconListScrollPane;
    private org.jdesktop.swingx.JXTitledPanel mainPanel;
    private DefaultListModel model;

    // End of variables declaration
    /**
     * DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     */
    public Object getValue() {
        final int selectedIndex = iconList.getSelectedIndex();

        System.out.println("SELECTED = " + selectedIndex + ", " +
            orderedKeyList.size());

        if ((0 <= selectedIndex) && (selectedIndex < orderedKeyList.size()))
            return orderedKeyList.get(selectedIndex);
        else

            return orderedKeyList.get(0);
    }

    /*
     * Key SHOULD be enum.
     */
    private void setList() {
        List<Icon> icons = new ArrayList<Icon>();
        orderedKeyList = new ArrayList();

        model = new DefaultListModel();
        iconList.setModel(model);

        VisualPropertyIcon icon;

        for (Object key : shapeMap.keySet()) {
            icon = (VisualPropertyIcon) shapeMap.get(key);
            icons.add(icon);
            orderedKeyList.add(key);
            model.addElement(icon.getName());
        }

        iconList.setCellRenderer(new IconCellRenderer(icons));
        iconList.repaint();
    }

    public class IconCellRenderer extends JLabel
        implements ListCellRenderer {
        private final Font SELECTED_FONT = new Font("SansSerif", Font.ITALIC, 18);
        private final Font NORMAL_FONT = new Font("SansSerif", Font.BOLD, 14);
        private final Color SELECTED_COLOR = new Color(0, 5, 80, 30);
        private final Color SELECTED_FONT_COLOR = new Color(0, 150, 255, 120);
        private final List<Icon> icons;

        public IconCellRenderer(List<Icon> icons) {
            this.icons = icons;
            setOpaque(true);
        }

        public Component getListCellRendererComponent(JList list, Object value,
            int index, boolean isSelected, boolean cellHasFocus) {
            final VisualPropertyIcon icon = (VisualPropertyIcon) icons.get(index);

            setText(value.toString());
            setIcon(icon);
            setFont(isSelected ? SELECTED_FONT : NORMAL_FONT);

            this.setVerticalTextPosition(SwingConstants.CENTER);
            this.setVerticalAlignment(SwingConstants.CENTER);
            this.setHorizontalAlignment(SwingConstants.CENTER);
            this.setIconTextGap(25);

            setBackground(isSelected ? SELECTED_COLOR : list.getBackground());
            setForeground(isSelected ? SELECTED_FONT_COLOR : list.getForeground());
            setPreferredSize(
                new Dimension(
                    icon.getIconWidth(),
                    icon.getIconHeight() + 20));
            // this.setBorder(new LineBorder(Color.black));
            this.setBorder(new DropShadowBorder());

            return this;
        }
    }
}
