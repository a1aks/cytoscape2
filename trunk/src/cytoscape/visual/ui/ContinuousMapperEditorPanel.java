package cytoscape.visual.ui;

import org.jdesktop.swingx.JXGradientChooser;
import org.jdesktop.swingx.JXMultiThumbSlider;
import org.jdesktop.swingx.color.ColorUtil;
import org.jdesktop.swingx.multislider.Thumb;
import org.jdesktop.swingx.multislider.ThumbRenderer;
import org.jdesktop.swingx.multislider.TrackRenderer;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

import java.io.File;

import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;


/*
 * ContinuousMapperEditorPanel.java
 *
 * Created on 2007/02/15, 10:32
 *
 * @author  kono
 */
/**
 * DOCUMENT ME!
 *
 * @author $author$
  */
public class ContinuousMapperEditorPanel extends javax.swing.JPanel {
    /** Creates new form ContinuousMapperEditorPanel */
    public ContinuousMapperEditorPanel() {
        initComponents();

        setSlider();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code">
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        slider = new org.jdesktop.swingx.JXMultiThumbSlider();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();

        jPanel1.setBorder(
            javax.swing.BorderFactory.createTitledBorder("Gradient"));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 300,
                Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 81,
                Short.MAX_VALUE));

        slider.setMaximumValue(100.0F);

        org.jdesktop.layout.GroupLayout jXMultiThumbSlider1Layout = new org.jdesktop.layout.GroupLayout(slider);
        slider.setLayout(jXMultiThumbSlider1Layout);
        jXMultiThumbSlider1Layout.setHorizontalGroup(
            jXMultiThumbSlider1Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 310,
                Short.MAX_VALUE));
        jXMultiThumbSlider1Layout.setVerticalGroup(
            jXMultiThumbSlider1Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(0, 70,
                Short.MAX_VALUE));

        jPanel2.setBorder(
            javax.swing.BorderFactory.createTitledBorder(
                null,
                "Thumb Setting",
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("Dialog", 0, 11),
                new java.awt.Color(102, 102, 102)));
        jLabel1.setText("Opacity");

        jLabel2.setText("Color");

        jButton1.setText("Delete");

        jButton2.setText("Delete");

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                jPanel2Layout.createSequentialGroup().addContainerGap().add(
                    jPanel2Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING, false).add(
                        jPanel2Layout.createSequentialGroup().add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jTextField1,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(
                        jPanel2Layout.createSequentialGroup().add(jLabel2).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE).add(jTextField2,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED,
                    74, Short.MAX_VALUE).add(
                    jPanel2Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,
                        jButton1).add(org.jdesktop.layout.GroupLayout.TRAILING,
                        jButton2)).addContainerGap()));
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(
                org.jdesktop.layout.GroupLayout.LEADING).add(
                jPanel2Layout.createSequentialGroup().add(
                    jPanel2Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel1).add(jButton1).add(jTextField1,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(
                    jPanel2Layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(jButton2).add(jTextField2,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE)));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                org.jdesktop.layout.GroupLayout.TRAILING,
                layout.createSequentialGroup().addContainerGap().add(
                    layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.TRAILING).add(org.jdesktop.layout.GroupLayout.LEADING,
                        jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE).add(jPanel2,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.LEADING,
                        slider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        310, Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().addContainerGap().add(jPanel1,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(slider,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jPanel2,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()));
    } // </editor-fold>

    private void setSlider() {
        // slider.setPreferredSize(new Dimension(600, 600));
        // slider.setSize(new Dimension(600, 600));
        Dimension dim = new Dimension(600, 200);
        setPreferredSize(dim);
        setSize(dim);
        setMinimumSize(new Dimension(300, 200));
        slider.updateUI();

        List obj = new ArrayList();
        obj.add(Color.red);
        obj.add(Color.green);

        slider.getModel()
              .addThumb(10.0f, Color.black);
        slider.getModel()
              .addThumb(20.0f, Color.red);
        slider.getModel()
              .addThumb(40.0f, Color.blue);
        slider.getModel()
              .addThumb(80.0f, Color.green);

        IconThumbRenderer rend = new IconThumbRenderer(obj, slider);

        IconTrackRenderer trackrend = new IconTrackRenderer();
        slider.setThumbRenderer(rend);
        slider.setTrackRenderer(trackrend);
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private org.jdesktop.swingx.JXMultiThumbSlider slider;

    // End of variables declaration
    class IconThumbRenderer extends JComponent
        implements ThumbRenderer {
        // private final JXGradientChooser gradientPicker;
        private JXMultiThumbSlider slider;
        private ImageIcon thumb_black;
        private ImageIcon thumb_gray;
        private List list;
        Image thumb;

        public IconThumbRenderer(List<Object> objList, JXMultiThumbSlider slider) {
            super();
            // this.gradientPicker = gradientPicker;
            this.slider = slider;

            this.list = objList;

            try {
                thumb = ImageIO.read(
                        new File(
                            "/cellar/users/kono/workspace/cytoscape25Mock/images/icon100.png"));
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
                ex.printStackTrace();
            }

            Dimension dim = new Dimension(160, 160);

            setSize(dim);
            setMinimumSize(dim);
            setPreferredSize(dim);
            setMaximumSize(dim);

            setBackground(Color.white);

            // try {
            // thumb_black = new ImageIcon();
            //
            // // thumb_black =
            // // ImageIO.read(this.getClass().getResourceAsStream(
            // // "/icons/thumb_black.png"));
            // // thumb_gray =
            // // ImageIO.read(this.getClass().getResourceAsStream(
            // // "/icons/thumb_gray.png"));
            // } catch (Exception ex) {
            // ex.printStackTrace();
            // }
        }

        private boolean selected;

        protected void paintComponent(Graphics g) {
            ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

            Polygon poly = new Polygon();

            poly.addPoint(0, 0);
            poly.addPoint(10, 0);
            poly.addPoint(5, 10);
            g.fillPolygon(poly);

            // JComponent thumb = this;
            // thumb.setPreferredSize(new Dimension(160, 160));
            // // int w = thumb.getWidth();
            // // g.setColor(getForeground());
            // // g.fillRect(0, 0, w - 1, w - 1);
            //
            // // g.drawOval(0, 0, 40, 50);
            // g.fillOval(0, 0, 30, 40);
            //
            // // if (selected) {
            // // g.
            // // //g.drawImage(thumb_black, 0, 0, null);
            // // } else {
            // // g.draw3DRect(15, 25, 45, 25, true);
            // // //g.drawImage(thumb_gray, 0, 0, null);
            // // }
        }

        public JComponent getThumbRendererComponent(JXMultiThumbSlider slider,
            int index, boolean selected) {
            // Color c = (Color) list.get(index);
            this.selected = selected;

            Color selectedColor = new Color(
                    Color.red.getRed(),
                    Color.red.getGreen(),
                    Color.red.getBlue(),
                    150);

            if (selected)
                this.setForeground(selectedColor);
            else
                this.setForeground(Color.DARK_GRAY);

            return this;
        }
    } // end of internal class

    class IconTrackRenderer extends JComponent
        implements TrackRenderer {
        private Paint checker_paint;

        // private final JXGradientChooser gradientPicker;
        private BufferedImage icon1 = null;

        public IconTrackRenderer() {
            // this.gradientPicker = gradientPicker;
            checker_paint = ColorUtil.getCheckerPaint();

            try {
                icon1 = ImageIO.read(
                        new File(
                            "/cellar/users/kono/workspace/cytoscape25Mock/images/vizmapper16.gif"));
            } catch (Exception e) {
                e.printStackTrace();
                icon1 = null;
            }
        }

        private JXMultiThumbSlider slider;

        public void paint(Graphics g) {
            super.paint(g);
            paintComponent(g);
        }

        protected void paintComponent(Graphics gfx) {
            // AA on
            Graphics2D g = (Graphics2D) gfx;
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

            // get the list of tumbs
            List<Thumb> stops = slider.getModel()
                                      .getSortedThumbs();
            int numPoints = stops.size();

            // set up the data for the gradient
            float[] fractions = new float[numPoints];
            Color[] colors = new Color[numPoints];
            int i = 0;

            for (Thumb<Color> thumb : stops) {
                colors[i] = (Color) thumb.getObject();
                fractions[i] = thumb.getPosition();
                i++;
            }

            // calculate the track area
            int thumb_width = 12;
            int track_width = slider.getWidth() - thumb_width;

            g.translate(thumb_width / 2, 12);

            Rectangle2D rect = new Rectangle(0, 0, track_width, 5);

            Line2D line1 = new Line2D.Float();

            // fill in the checker
            // g.setPaint(checker_paint);
            // g.fill(rect);

            // fill in the gradient
            Point2D start = new Point2D.Float(0, 5);
            Point2D end = new Point2D.Float(track_width, 5);

            // draw a border
            //			line1.setLine(start, end);
            //			g.setColor(Color.black);
            //			g.setStroke(new BasicStroke(3.0f));
            //			g.draw(line1);
            g.setColor(Color.DARK_GRAY);
            g.setFont(new Font("SansSerif", Font.BOLD, 12));
            g.drawString("Min = 0", 0, 59);
            g.drawString("Max = " + track_width, track_width - 70, 59);

            Point2D p1 = new Point2D.Float(0, 5);
            Point2D p2 = new Point2D.Float(0, 5);

            int newX = 0;
            System.out.println("#### Width = " + track_width);

            Line2D segment = new Line2D.Float();
            Rectangle2D rect1 = new Rectangle(0, 0, track_width, 5);

            for (i = 0; i < colors.length; i++) {
                newX = (int) ((track_width * (fractions[i] / 100)) + 5);
                System.out.println("X = " + newX);
                p2.setLocation(newX, 5);
                g.setColor(Color.black);
                g.setStroke(new BasicStroke(2.0f));
                rect1 = new Rectangle((int) p1.getX(), 5, newX, 25);
                segment.setLine(p1, p2);
                g.draw(rect1);
                g.setColor(Color.white);
                g.fill(rect1);

                g.setFont(new Font("SansSerif", Font.BOLD, 14));
                g.setColor(Color.black);
                g.drawString(
                    Float.toString(newX),
                    newX - 15,
                    44);

                int iconLoc = newX - ((newX - (int) p1.getX()) / 2);

                g.drawImage(icon1, iconLoc, 9, this);
                p1.setLocation(p2);
            }

            p2.setLocation(track_width, 5);
            rect1 = new Rectangle((int) p1.getX(), 5, track_width, 25);
            //segment.setLine(p1, p2);
            g.setColor(Color.black);
            g.draw(rect1);
            g.setColor(Color.white);
            g.fill(rect1);
            // g.setColor(Color.black);
            // g.draw(rect);
            g.translate(-thumb_width / 2, -12);
        }

        public JComponent getRendererComponent(JXMultiThumbSlider slider) {
            this.slider = slider;

            return this;
        }
    }
}
