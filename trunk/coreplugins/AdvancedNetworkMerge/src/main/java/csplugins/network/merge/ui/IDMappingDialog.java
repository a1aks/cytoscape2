/* File: AttributeBasedIDMappingDialog.java

 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.network.merge.ui;

import cytoscape.cythesaurus.service.CyThesaurusServiceClient;
import cytoscape.cythesaurus.service.CyThesaurusServiceMessageBasedClient;

import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;

import java.awt.Frame;

/**
 *
 * @author gjj
 */
public class IDMappingDialog extends javax.swing.JDialog {

    /** Creates new form AttributeBasedIDMappingDialog */
    public IDMappingDialog(java.awt.Frame parent,
                                boolean modal,
                                Map<String,Set<String>> selectedNetworkAttribute,
                                boolean isNode) {
        super(parent, modal);
        this.frame = parent;
        this.isNode = isNode;

        initSrcTypes(selectedNetworkAttribute);

        cancelled = true;

        cythesaurusClient = new CyThesaurusServiceMessageBasedClient("AdvencedNetworkMerge");

        initComponents();
    }

     // initialize selectedNetworkAttributeIDType
    private void initSrcTypes(Map<String,Set<String>> selectedNetworkAttribute) {
                selectedNetworkAttributeIDType = new HashMap<String,Map<String,Set<String>>>();
                Iterator<Map.Entry<String,Set<String>>> itEntry = selectedNetworkAttribute.entrySet().iterator();
                while (itEntry.hasNext()) {
                        Map.Entry<String,Set<String>> entry = itEntry.next();
                        String netID = entry.getKey();
                        Map<String,Set<String>> mapAttributeIDType = new HashMap<String,Set<String>>();
                        selectedNetworkAttributeIDType.put(netID, mapAttributeIDType);

                        Iterator<String> itAttr = entry.getValue().iterator();
                        while (itAttr.hasNext()) {
                                String attr = itAttr.next();
                                Set<String> types = new HashSet<String>();
                                mapAttributeIDType.put(attr, types);
                        }

                }
       }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        idTypePanel = new javax.swing.JPanel();
        idTypeScrollPane = new javax.swing.JScrollPane();
        javax.swing.JPanel toPanel = new javax.swing.JPanel();
        toLabel = new javax.swing.JLabel();
        toComboBox = new javax.swing.JComboBox();
        optionPanel = new javax.swing.JPanel();
        optionButton = new javax.swing.JButton();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ID Mapping Configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        idTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select ID type(s) for each attribute"));
        idTypePanel.setLayout(new javax.swing.BoxLayout(idTypePanel, javax.swing.BoxLayout.LINE_AXIS));

        idTypeScrollPane.setMinimumSize(new java.awt.Dimension(450, 200));
        idTypeScrollPane.setPreferredSize(new java.awt.Dimension(500, 300));

        idTypeSelectionTable = new IDTypeSelectionTable(frame,this);
        //idTypeSelectionTable.setMinimumSize(new java.awt.Dimension(400, 100));
        //idTypeSelectionTable.setPreferredSize(new java.awt.Dimension(450, 200));
        idTypeSelectionTable.setSupportedSrcIDType(cythesaurusClient.supportedSrcIDTypes());
        idTypeScrollPane.setViewportView(idTypeSelectionTable);

        idTypePanel.add(idTypeScrollPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(idTypePanel, gridBagConstraints);

        toPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        toLabel.setText("Destination ID Type:");
        toPanel.add(toLabel);

        String[] types = cythesaurusClient.supportedTgtIDTypes().toArray(new String[0]);
        java.util.Arrays.sort(types);
        toComboBox.setModel(new javax.swing.DefaultComboBoxModel(types));
        toPanel.add(toComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(toPanel, gridBagConstraints);

        optionPanel.setLayout(new javax.swing.BoxLayout(optionPanel, javax.swing.BoxLayout.LINE_AXIS));

        //optionDialog = new NetworkMergeOptionDialog(frame,true);
        //optionDialog.pack();
        optionButton.setText("Configure ID Mapping Resources");
        optionButton.setToolTipText("Click to set up options");
        optionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionButtonActionPerformed(evt);
            }
        });
        optionPanel.add(optionButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(optionPanel, gridBagConstraints);

        okButton.setText("   OK   ");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        okPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(okPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void optionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionButtonActionPerformed
            CyThesaurusServiceClient client = new CyThesaurusServiceMessageBasedClient("AdvancedNetworkMerge");
            if (!client.openMappingResourceConfigDialog()) {
                //javax.swing.JOptionPane.showMessageDialog(this, "Failed to open the configuration dialog.");
            } else {
                Set<String> srcTypes = cythesaurusClient.supportedSrcIDTypes();
                for (Map<String,Set<String>> mapAttrTypes : selectedNetworkAttributeIDType.values()) {
                    for (Set<String> types : mapAttrTypes.values()) {
                        types.retainAll(srcTypes);
                    }
                }
                idTypeSelectionTable.setSupportedSrcIDType(srcTypes);

                String[] tgtTypes = cythesaurusClient.supportedTgtIDTypes().toArray(new String[0]);
                java.util.Arrays.sort(tgtTypes);
                String oldType = (String)toComboBox.getSelectedItem();
                toComboBox.setModel(new javax.swing.DefaultComboBoxModel(tgtTypes));
                toComboBox.setSelectedItem(oldType);
            }
    }//GEN-LAST:event_optionButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        cancelled = false;
        this.setVisible(false);
        this.dispose();
}//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    public Map<String,Map<String,Set<String>>> getSrcTypes() {
            return selectedNetworkAttributeIDType;
    }

    void updateGoButtonEnable() {

        if (getTgtType()==null) {
                okButton.setToolTipText("No target ID type available");
                okButton.setEnabled(false);
                return;
        }

        Iterator<String> itNet = selectedNetworkAttributeIDType.keySet().iterator();
        while (itNet.hasNext()) {
            String network = itNet.next();
            Map<String,Set<String>> mapAttrIDType = selectedNetworkAttributeIDType.get(network);
            Iterator<Set<String>> itTypes = mapAttrIDType.values().iterator();
            while (itTypes.hasNext()) {
                if (itTypes.next().isEmpty()) {
                        okButton.setToolTipText("Select at least one ID type for each attribute");
                        okButton.setEnabled(false);
                        return;
                }
            }
        }


        okButton.setToolTipText(null);
        okButton.setEnabled(true);
    }

    public String getTgtType() {
            if (toComboBox.getItemCount()==0) {
                    return null;
            }

            return (String)toComboBox.getSelectedItem();
    }

    public void setTgtType(String type) {
        if (type==null)
            return;

        toComboBox.setSelectedItem(type);
    }
    
public boolean isCancelled() {
    return cancelled;
}

//void setOKButtonEnable() {
//        if (idMapping.isEmpty()) {
//                okButton.setEnabled(false);
//                okButton.setToolTipText("No ID mapping has been imported.");
//        } else {
//                okButton.setEnabled(true);
//                okButton.setToolTipText(null);
//        }
//}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel idTypePanel;
    private IDTypeSelectionTable idTypeSelectionTable;
    private javax.swing.JScrollPane idTypeScrollPane;
    private javax.swing.JButton okButton;
    private javax.swing.JButton optionButton;
    //private NetworkMergeOptionDialog optionDialog;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JComboBox toComboBox;
    private javax.swing.JLabel toLabel;
    // End of variables declaration//GEN-END:variables

        private boolean cancelled;
        private Frame frame;
        private boolean isNode;

        private Map<String,Map<String,Set<String>>> selectedNetworkAttributeIDType;
        private CyThesaurusServiceClient cythesaurusClient;
}
