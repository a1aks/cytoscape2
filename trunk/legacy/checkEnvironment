#!/usr/bin/env perl 
#------------------------------------------------------------------------
# $Revision$
# $Date$
# $Author$
#------------------------------------------------------------------------
# implicit main starts here

  checkJavaVersion ();
  checkJavaHome ();
  checkLeda ();
  checkCppUnit ();
  checkLdLibraryPath ();


# end of implicit main
#-------------------------------------------------------------------------
sub checkCppUnit
{
  my $cppUnitHome = $ENV {'CPPUNIT_HOME'};
  if ((length $cppUnitHome) == 0) {
    printErrorAndQuit ("CPPUNIT_HOME is undefined");
    }

  my $diagnosticCppUnitFile = $cppUnitHome . "/include/cppunit/TestSuite.h";
  my $fileIsReadable = -r $diagnosticCppUnitFile;
  if (!$fileIsReadable) {
    printErrorAndQuit ("cannot read a representative CPPUNIT file:\n\t " .
                       $diagnosticCppUnitFile . 
                       "\ncheck value of CPPUNIT_HOME, currently: " . 
                       $cppUnitHome);
    }
  else {
    printSuccessMessage ("CPPUNIT_HOME okay");
    }
 
}# checkCppUnit
#-------------------------------------------------------------------------
sub checkLeda 
{
  my $ledaHome = $ENV {'LEDA_HOME'};
  if ((length $ledaHome) == 0) {
    printErrorAndQuit ("LEDA_HOME is undefined");
    }

  my $diagnosticLedaFile = $ledaHome . "/incl/LEDA/graph.h";
  my $fileIsReadable = -r $diagnosticLedaFile;
  if (!$fileIsReadable) {
    printErrorAndQuit ("cannot read a representative LEDA file:\n\t " .
                       $diagnosticLedaFile . 
                       "\ncheck value of LEDA_HOME, currently: " . 
                       $ledaHome);
    }
  else {
    printSuccessMessage ("LEDA_HOME okay");
    }
 
}# checkLeda
#-------------------------------------------------------------------------
sub checkJavaVersion
{
  my $requiredVersionString = "1.4.0";
  my $versionString = `java -version 2>&1 | grep $requiredVersionString`;
  my $lengthOfMessage = length $versionString;
  if ($lengthOfMessage > 0) {
    printSuccessMessage ("java version okay: $requiredVersionString");
    }
  else {
    printErrorAndQuit ("java version must be $requiredVersionString");
    }

}# checkJavaVersion
#-------------------------------------------------------------------------
sub checkJavaHome
{
  my $javaHome = $ENV {'JAVA_HOME'};
  if ((length $javaHome) == 0) {
    printErrorAndQuit ("JAVA_HOME is undefined");
    }

  my $diagnosticJavaFile = $javaHome . "/include/jni.h";
  my $fileIsReadable = -r $diagnosticJavaFile;
  if (!$fileIsReadable) {
    printErrorAndQuit ("cannot read a representative Java file:\n\t " .
                       $diagnosticJavaFile . 
                       "\ncheck value of JAVA_HOME, currently: " . 
                       $javaHome);
    }
  else {
    printSuccessMessage ("JAVA_HOME okay");
    }
 
}# checkJavaHome
#-------------------------------------------------------------------------
sub checkLdLibraryPath
{
  my $fullPath = $ENV {'LD_LIBRARY_PATH'};
  my @allPaths = split (/:/, $fullPath);


   # the following names are from LEDA and cppunit
   # make sure they can be found in the current LD_LIBRARY_PATH

  my $someProblemFindingLibraries = 0;  #be optimistic
  my $errorMessage = "";

  my @libNames = ("G", "L", "D3", "W", "P", "cppunit");

  foreach $lib (@libNames) {
    my $found = 0;
    foreach $path (@allPaths) {
      my $candidate = sprintf ("%s/lib%s.so", $path, $lib);
      if (-r $candidate) {
        $found = 1;
        }# if found
      }# foreach $path
    if (!$found) {
      $someProblemFindingLibraries = 1;
      $errorMessage .= 
             sprintf ("failed to find %s in LD_LIBRARY_PATH\n", $lib);
      } # if !found
    }# foreach $lib

  if ($someProblemFindingLibraries) {
    printErrorAndQuit ($errorMessage . "Please check your LD_LIBRARY_PATH.")
    }

  printSuccessMessage ("LD_LIBRARY_PATH okay");

}# checkLdLibraryPath
#-------------------------------------------------------------------------
sub printErrorAndQuit 
{

  my $msg = $_[0];
  printf ("================== ERROR!\n%s\n", $msg);
  exit 1;

}
#-------------------------------------------------------------------------
sub printSuccessMessage
{

  my $msg = $_[0];
  printf ("================== %s\n", $msg);

}
#-------------------------------------------------------------------------





  
