<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<author>Ethan Cerami</author>
		<title>Architectural Overview</title>
	</properties>
	<body>
		<section name="About this document">
			<P>This document summarizes architectural considerations for building a data services
				layer for Cytoscape. It currently summarizes ideas from Gary, Paul and Ethan. All 
				of this is open to debate. Feedback is most welcome. This document is written in 
				XDocs format and will be kept under source control, so that we can keep track of 
				revisions.</P>
		</section>
		<section name="The Big Picture">
			<P> We plan to build a new modular library for reading / writing to multiple biological
                data sources. Cytoscape Plug In writers can then use this new library to import /
                export data directly. In conjunction with the building of the library, we also plan
                to build several initial plug ins that illustrate the new functionality.</P>
			<P> To ensure modularity of code, the current golden rule of cytoscape is &quot;no
                biological semantics in the core.&quot; In keeping with this tradition, the data
                layer golden rule will be: &quot;no cytoscape semantics in the data layer.&quot; In
                other words, the data layer will be a completely stand alone library that can be
                used by Cytoscape, but may also be used by other projects in the future.</P>
		</section>
		<section name="Architectural Overview">
			<P> Based on Paul's original ideas, we plan to have a suite of data service 
				classes, and a Data Service Factory.  We define the following terms:
			<UL>
				<LI>Data Service: Any class that is capable of retrieving data from 
					or writing data to an external data source. Data may be local or 
					remote, and may use any number of protocols, including SQL, HTTP, 
					IBM TSpaces, SOAP, etc. However, implementation details are 
					completely hidden from the client.</LI>
				<P/>
				<LI>Data Source Description: A single class that describes an external data source.
				     Currently, this class includes four main properties:</LI>
				<OL>
					<LI>Category: Very broadly, this specifies the category of data available 
						from the data source. For example, valid values might include: 
						Protein, DNA, RNA, small molecule, or interaction.</LI>
					<LI>Protocol: Specifies the data format or protocol used to retrieve/submit
						data. For example, valid values might include: FASTA, GenBank, 
						SeqHound API, BIND XML, SRS, DIP etc.</LI>
					<LI>Location: Specifies the location of the external data source. This could
						be a pointer to a local file, a database connect string or an 
						absolute URL.</LI>
					<LI>Cache: Specifies several options for local caching of content. Specific
                        		options are still being fleshed out.</LI>
				</OL>
				<P> For example, you can specify 1) category=protein; 2) protocol=SeqHound API; 3)
                    location=http://seqhound.mshri.on.ca/ 4) cache=in_memory. If the SeqHound API moves,
                    you just modify the data location, and everything still works as expected. If we
                    find a new data source that provides identical protein information, we can just
                    specify a new protocol, and everything will work as expected then too.</P>
	    <LI>Data Services Factory:  The data service factory will receive a Data Source Description
		    object, and return the correct Data Service object.  
                    Schematically, the Data Service Factory looks like this:<source><![CDATA[
+-------------------------+     +---------------------+      +-------------------+
| Data Source Description |---> | Data Service Factory| ---> | Data Service      |
|+------------------------+     +---------------------+      +-------------------+
]]></source>
				</LI>
			</UL>
		</P>
		</section>
		<section name="Services and Factories">
			<P>We have a few options for building services and the factory. One option is to build a
                factory with a single method, e.g. getService(). The getService() receives a data
                source description object, and returns a matching data service. Some sample code is
                provided below: </P>
			<source><![CDATA[
DataSource source = new DataSource();
source.setCategory (PROTEIN);
source.setProtocol (SEQHOUND_API);
source.setLocation ("http://seqhound.mshri.on.ca/");
ProteinService service = (ProteinService) DataServiceFactory.getService (source);
]]></source>
			<P> Using this option, the client will need to cast to the correct service interface.</P>
			<P>The second option is to build a factory with multiple methods, e.g.
                getProteinService(), getDnaService(), etc. These methods also receive a data source
                description object and return a matching data service. Some sample code is provided
                below: </P>
			<source><![CDATA[
DataSource source = new DataSource();
source.setProtocol (SEQHOUND_API);
source.setLocation ("http://seqhound.mshri.on.ca/"); 
ProteinService service = DataServiceFactory.getProteinService (source);
]]></source>
			<P>The advantage of the second approach is that the client code is much more specific, and
				there is no need to rely on client casting of services.  However, the advantage
				of the first approach is that is that it is much more extensible, and 
				can support dozens of new services via the same getService() method.
			</P>
			<P>Note:  For phase 1, we decided to go forward with the first option.  
			</P>
			<subsection name="UML Diagrams">
			<P>
				UML diagrams of the core data service packages are provided below.
			</P>
			<CENTER>
				<IMG BORDER="0" vspace="3" hspace="3" SRC="images/core_uml.jpg"/>
				<P>
					<B>Figure 1:</B>UML Diagram of the Dataservices Core Package.
				</P>
				<IMG BORDER="0" vspace="3" hspace="3" SRC="images/services_uml.jpg"/>
				<P>
					<B>Figure 2:</B>UML Diagram of the Dataservices Services Package.
				</P>
			</CENTER>
		</subsection>
		</section>
		<section name="Semantics: How do we organize our classes?">
Broadly, we are considering 3 categories of data:
<ol><li>Data about parts (nodes)</li>
<li>Data about relationships/interactions (edges)</li>
<li>Results that take extended time to compute</li>
</ol>
<P>
More details:
<ol> <LI>Parts:<BR/>
Biological sequence (Protein, DNA, RNA), Small molecule (e.g. drugs, metabolites)<BR/>
Can be found in many databases e.g. GenBank, SeqHound, SRS, Swiss-Prot/Trembl, Interpro, PIR, etc.  Each category of part
has its own attributes are would be useful to fetch and display e.g. proteins have domains, DNA has promoter regions.
</LI>
<LI>Relationships/Interactions.  Interactions between two or more things.  Interactions between two things are the typical edge that we deal with.
Interactions between more than 2 things are sets of objects that will probably have to be represented as a special node that is a 'set' of parts
(maybe called a multinode?).  The relationship will be defined by the parts that are in the relationship e.g. a protein-protein interaction can be
defined by two proteins, so a constructor that takes as arguments two proteins to form a relationship would return a protein-protein
interaction.  The logic of the data services layer would understand that protein-protein interaction information can only come from certain databases.
</LI>
<LI>Computed resources.  This is anything that takes a significant amount of time to compute and return, such as BLAST.
This probably does not include BLAST results that are precomputed and sitting in a database ready to read.  The computing process must take
"more time than the user is willing to sit around and wait for the return of data after a mouse click".
E.g. <a href="http://www.ncbi.nlm.nih.gov/BLAST/qblast.html">QBLAST</a>.  We might have to compute this data offline and save it in a cache.
</LI>
</ol>
</P>
		</section>

		<section name="Data categories we would like to support?">
This list is unprioritized and incomplete.
<ul>
<li>Protein</li>
<li>DNA</li>
<li>RNA</li>
<li>small molecule</li>
<li>molecular interactions between proteins, DNA, RNA and small molecules</li>
<li>BLAST results</li>
<li>Clustal (or other multiple sequence alignment - MSA) results</li>
</ul>
		</section>

		<section name="Data formats we would like to support?">
This list is unprioritized and incomplete.
<ul>
<li>GenBank Flat File (for biological sequences)</li>
<li>FASTA (for biological sequences)</li>
<li>GML (Graph Markup Language)</li>
<li>.sif (Cytoscape)</li>
<li>.attr (Cytoscape)</li>
<li>Clustal MSA files</li>
<li>BLAST output</li>
</ul>
		</section>

		<section name="Data sources we would like to support?">
This list is unprioritized and incomplete.
<ul>
<LI><A HREF="http://biodata.mshri.on.ca/grid/servlet/Index">GRID</A></LI>
<LI><A HREF="http://bind.ca">BIND</A></LI>
<LI><A HREF="http://www.ebi.ac.uk/intact/">IntAct</A></LI>
<LI><A HREF="http://dip.doe-mbi.ucla.edu/">DIP</A></LI>
<LI><A HREF="http://http://cbm.bio.uniroma2.it/mint/">MINT</A></LI>
<LI><A HREF="http://www.genome.ad.jp/kegg/kegg2.html">KEGG</A></LI>
<LI><A HREF="http://biocyc.org">BioCyc</A></LI>
<LI><A HREF="http://wit.mcs.anl.gov/WIT2/">WIT</A></LI>
<LI><A HREF="http://www.ncbi.nlm.nih.gov/">GenBank</A></LI>
<LI><A HREF="http://seqhound.mshri.on.ca/">SeqHound</A></LI>
<LI><A HREF="http://srs.ebi.ac.uk/">SRS</A></LI>
<LI>Disk files</LI>
<LI>Files on the web (URLs)</LI>
<LI>Web services</LI>
<LI><a href="http://psidev.sf.net">PSI-MI</a></LI>
<LI><a href="http://biopax.org">BioPAX</a></LI>
</ul>
		</section>

		<section name="Open Source Resources">
			<P>To the extent possible, we want to use existing open source libraries, rather than
                reinvent the wheel. Currrently, we are considering the following:</P>
			<UL>
				<LI>
					<A HREF="http://www.biojava.org">BioJava:</A>provides numerous I/O facilties for
                    parsing specific biological data formats, such as FASTA and GenBank flat file.</LI>
				<LI>
					<A HREF="http://jakarta.apache.org/commons/httpclient/">HttpClient:</A>open
                    source HTTP client that provides several features beyond that provided in the
                    JDK API. In particular, it supports connection time outs, and support for
                    Multi-Part form POST for uploading of form data to databases that support submission of records via forms
                    and for uploading of large files.</LI>
				<LI>
					<A HREF="http://jakarta.apache.org/turbine/jcs/index.html">Java Caching
                    Service:</A>open source API for caching Java objects. Includes the ability to
                    create multiple caches within a single application, and the ability to cache
                    contents within memory and within a local file system. </LI>
			</UL>
		</section>
		<section name="Revisions">
		    <P>
<PRE>
$Log$
Revision 1.1  2003/05/30 19:13:49  ceramie
Initial commit

Revision 1.8  2003/05/16 21:23:25  cerami
Updated document to reflect reality of phase 1 implementation

Revision 1.7  2003/04/08 21:32:17  cerami
Fixed LI tag

Revision 1.6  2003/04/04 19:50:45  bader
Added more file format examples and fixed web services data source.

Revision 1.5  2003/04/04 19:08:29  cerami
Added  tag

Revision 1.4  2003/04/04 17:03:54  cerami
Fixed errors in well-formedness
</PRE>
		    </P>
		</section>
	</body>
</document>
