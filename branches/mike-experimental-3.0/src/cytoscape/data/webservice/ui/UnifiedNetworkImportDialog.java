/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
*/
package cytoscape.data.webservice.ui;

import cytoscape.GraphPerspective;
import cytoscape.Cytoscape;

import cytoscape.data.webservice.CyWebServiceEvent;
import cytoscape.data.webservice.CyWebServiceEvent.WSEventType;
import cytoscape.data.webservice.DatabaseSearchResult;
import cytoscape.data.webservice.NetworkImportWebServiceClient;
import cytoscape.data.webservice.WebServiceClient;
import cytoscape.data.webservice.WebServiceClientManager;
import cytoscape.data.webservice.WebServiceClientManager.ClientType;

import cytoscape.layout.Tunable;

import cytoscape.task.Task;
import cytoscape.task.TaskMonitor;

import cytoscape.task.ui.JTaskConfig;

import cytoscape.task.util.TaskManager;

import cytoscape.util.ModuleProperties;

import cytoscape.visual.VisualStyle;

import java.awt.Color;
import java.awt.GridLayout;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;


/**
 *
 * @author  kono
 */
public class UnifiedNetworkImportDialog extends javax.swing.JDialog
    implements PropertyChangeListener {
	private final static long serialVersionUID = 1202339872434259L;
	private static final UnifiedNetworkImportDialog dialog;
	private String selectedClientID = null;

	// Key is display name, value is actual service name.
	private Map<String, String> clientNames;

	static {
		dialog = new UnifiedNetworkImportDialog(Cytoscape.getDesktop(), false);
	}

	/**
	 *  DOCUMENT ME!
	 */
	public static void showDialog() {
		dialog.setLocationRelativeTo(Cytoscape.getDesktop());
		dialog.setVisible(true);
	}

	/** Creates new form NetworkImportDialog */
	public UnifiedNetworkImportDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);

		// Register as listener.
		Cytoscape.getPropertyChangeSupport().addPropertyChangeListener(this);

		clientNames = new HashMap<String, String>();

		initComponents();
		setDatasource();

		setProperty(clientNames.get(datasourceComboBox.getSelectedItem()));
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc=" Generated Code">                          
	private void initComponents() {
		mainPanel = new javax.swing.JPanel();
		titleLabel = new javax.swing.JLabel();
		datasourceLabel = new javax.swing.JLabel();
		datasourceComboBox = new javax.swing.JComboBox();
		searchButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		resetButton = new javax.swing.JButton();
		mainTabbedPane = new javax.swing.JTabbedPane();
		searchTermScrollPane = new javax.swing.JScrollPane();
		searchTermTextPane = new javax.swing.JTextPane();
		propertyPanel = new javax.swing.JPanel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Import Network from Web Services");
		setBackground(new java.awt.Color(255, 255, 255));
		mainPanel.setBackground(new java.awt.Color(255, 255, 255));
		titleLabel.setBackground(new java.awt.Color(255, 255, 255));
		titleLabel.setFont(new java.awt.Font("SansSerif", 1, 18));
		titleLabel.setIcon(new javax.swing.ImageIcon(Cytoscape.class.getResource("images/ximian/network.png")));
		titleLabel.setText("Import Network from Database");

		datasourceLabel.setText("Datasource:");

		datasourceComboBox.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					datasourceComboBoxActionPerformed(evt);
				}
			});

		searchButton.setText("Search");
		searchButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					searchButtonActionPerformed(evt);
				}
			});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					cancelButtonActionPerformed(evt);
				}
			});

		resetButton.setText("Clear Query");
		resetButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					resetButtonActionPerformed(evt);
				}
			});

		searchTermTextPane.setFont(new java.awt.Font("SansSerif", 0, 12));
		searchTermTextPane.setText("Please enter search terms...");
		searchTermScrollPane.setViewportView(searchTermTextPane);

		mainTabbedPane.addTab("Query", searchTermScrollPane);

		org.jdesktop.layout.GroupLayout propertyPanelLayout = new org.jdesktop.layout.GroupLayout(propertyPanel);
		propertyPanel.setLayout(propertyPanelLayout);
		propertyPanelLayout.setHorizontalGroup(propertyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                          .add(0, 408, Short.MAX_VALUE));
		propertyPanelLayout.setVerticalGroup(propertyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                        .add(0, 303, Short.MAX_VALUE));

		propertyScrollPane = new JScrollPane();
		propertyScrollPane.setViewportView(propertyPanel);
		mainTabbedPane.addTab("Search Property", propertyScrollPane);

		org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
		mainPanel.setLayout(mainPanelLayout);
		mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                  .add(mainPanelLayout.createSequentialGroup()
		                                                                      .addContainerGap()
		                                                                      .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                                                          .add(mainPanelLayout.createSequentialGroup()
		                                                                                                              .add(resetButton)
		                                                                                                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED,
		                                                                                                                               151,
		                                                                                                                               Short.MAX_VALUE)
		                                                                                                              .add(cancelButton)
		                                                                                                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                                                              .add(searchButton))
		                                                                                          .add(mainPanelLayout.createSequentialGroup()
		                                                                                                              .add(datasourceLabel)
		                                                                                                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                                                              .add(datasourceComboBox,
		                                                                                                                   0,
		                                                                                                                   328,
		                                                                                                                   Short.MAX_VALUE))
		                                                                                          .add(titleLabel,
		                                                                                               org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                                                               413,
		                                                                                               Short.MAX_VALUE)
		                                                                                          .add(mainTabbedPane,
		                                                                                               org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                                                               413,
		                                                                                               Short.MAX_VALUE))
		                                                                      .addContainerGap()));
		mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                                .add(org.jdesktop.layout.GroupLayout.TRAILING,
		                                                     mainPanelLayout.createSequentialGroup()
		                                                                    .addContainerGap()
		                                                                    .add(titleLabel)
		                                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                    .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
		                                                                                        .add(datasourceLabel)
		                                                                                        .add(datasourceComboBox,
		                                                                                             org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
		                                                                                             org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                                                             org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
		                                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                    .add(mainTabbedPane,
		                                                                         org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                                                         330,
		                                                                         Short.MAX_VALUE)
		                                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
		                                                                    .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
		                                                                                        .add(resetButton)
		                                                                                        .add(searchButton)
		                                                                                        .add(cancelButton))
		                                                                    .addContainerGap()));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                                .add(mainPanel,
		                                     org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                     org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                     Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
		                              .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                   org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
		                                   Short.MAX_VALUE));
		pack();
	} // </editor-fold>                        

	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
		selectedClientID = clientNames.get(datasourceComboBox.getSelectedItem());

		final CyWebServiceEvent event = buildEvent();
		System.out.println("Start importing network: " + evt.getActionCommand());

		//		WebServiceClientManager.getCyWebServiceEventSupport().fireCyWebServiceEvent(evt);
		WSNetworkImportTask task = new WSNetworkImportTask(datasourceComboBox.getSelectedItem()
		                                                                     .toString(), event);

		// Configure JTask Dialog Pop-Up Box
		final JTaskConfig jTaskConfig = new JTaskConfig();
		jTaskConfig.setOwner(Cytoscape.getDesktop());
		jTaskConfig.displayCloseButton(true);
		jTaskConfig.displayCancelButton(true);
		jTaskConfig.displayStatus(true);
		jTaskConfig.setAutoDispose(false);

		// Execute Task in New Thread; pops open JTask Dialog Box.
		TaskManager.executeTask(task, jTaskConfig);

		System.out.println("-------------------- Done!--------------");
		dispose();
	}

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		dispose();
	}

	private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
		searchTermTextPane.setText("");
	}

	private void datasourceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
		searchTermTextPane.setText("");
		setProperty(clientNames.get(datasourceComboBox.getSelectedItem()));
	}

	private void setProperty(String clientID) {
		WebServiceClient client = WebServiceClientManager.getClient(clientID);

		if (client == null) {
			return;
		}

		ModuleProperties props = client.getProps();
		List<Tunable> tunables = props.getTunables();
		propertyPanel = new JPanel(new GridLayout(0, 1));

		for (Tunable tu : tunables) {
			JPanel p = tu.getPanel();
			p.setBackground(Color.white);

			if (p != null)
				propertyPanel.add(p);
		}

		propertyScrollPane.setViewportView(propertyPanel);
		pack();
		repaint();
	}

	private void setDatasource() {
		List<WebServiceClient> clients = WebServiceClientManager.getAllClients();

		ClientType[] compatibleTypes = null;

		for (WebServiceClient client : clients) {
			compatibleTypes = client.getClientType();

			for (ClientType type : compatibleTypes) {
				if (type.equals(ClientType.NETWORK)) {
					this.datasourceComboBox.addItem(client.getDisplayName());
					this.clientNames.put(client.getDisplayName(), client.getClientID());

					break;
				}
			}
		}
	}

	private CyWebServiceEvent buildEvent() {
		final String clientID = clientNames.get(datasourceComboBox.getSelectedItem());

		// Update props here.
		WebServiceClientManager.getClient(clientID).getProps().updateValues();

		return new CyWebServiceEvent(clientID, WSEventType.SEARCH_DATABASE,
		                             searchTermTextPane.getText(), WSEventType.IMPORT_NETWORK);
	}

	// Variables declaration - do not modify                     
	private javax.swing.JButton cancelButton;
	private javax.swing.JComboBox datasourceComboBox;
	private javax.swing.JLabel datasourceLabel;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JTabbedPane mainTabbedPane;
	private javax.swing.JPanel propertyPanel;
	private JScrollPane propertyScrollPane;
	private javax.swing.JButton resetButton;
	private javax.swing.JButton searchButton;
	private javax.swing.JScrollPane searchTermScrollPane;
	private javax.swing.JTextPane searchTermTextPane;
	private javax.swing.JLabel titleLabel;

	// End of variables declaration        
	class WSNetworkImportTask implements Task {
		private String serviceName;
		private CyWebServiceEvent evt;
		private TaskMonitor taskMonitor;

		public WSNetworkImportTask(String serviceName, CyWebServiceEvent evt) {
			this.evt = evt;
			this.serviceName = serviceName;
		}

		public String getTitle() {
			// TODO Auto-generated method stub
			return "Loading network from web service...";
		}

		public void halt() {
			
		}

		public void run() {
			taskMonitor.setStatus("Loading interactions from " + serviceName);
			taskMonitor.setPercentCompleted(-1);
			// this even will load the file
			try {
				WebServiceClientManager.getCyWebServiceEventSupport().fireCyWebServiceEvent(evt);
			} catch (Exception e) {
				taskMonitor.setException(e, "Failed to load network from web service.");
				return;
			}
			taskMonitor.setPercentCompleted(100);
			taskMonitor.setStatus("Network successfully loaded.");
		}

		public void setTaskMonitor(TaskMonitor arg0) throws IllegalThreadStateException {
			this.taskMonitor = arg0;
		}
	}

	/**
	 *  DOCUMENT ME!
	 *
	 * @param evt DOCUMENT ME!
	 */
	public void propertyChange(PropertyChangeEvent evt) {
		Object resultObject = evt.getNewValue();

		if (evt.getPropertyName().equals("SEARCH_RESULT") && (resultObject != null)
		    && ((DatabaseSearchResult) resultObject).getNextMove().equals(WSEventType.IMPORT_NETWORK)) {
			System.out.println("Got search result from: " + evt.getSource() + ", Num result = "
			                   + ((DatabaseSearchResult) resultObject).getResultSize() + ", Source name = " + evt.getOldValue());

			String[] message = {
			                       ((DatabaseSearchResult) resultObject).getResultSize()
			                       + " records found in " + selectedClientID,
			                       "Do you want to create new network from the search result?"
			                   };
			int value = JOptionPane.showConfirmDialog(Cytoscape.getDesktop(), message,
			                                          "Import network", JOptionPane.YES_NO_OPTION);

			if (value == JOptionPane.YES_OPTION) {
				CyWebServiceEvent evt2 = new CyWebServiceEvent(evt.getOldValue().toString(),
				                                               WSEventType.IMPORT_NETWORK,
				                                               ((DatabaseSearchResult) resultObject)
				                                               .getResult());
				try {
					WebServiceClientManager.getCyWebServiceEventSupport().fireCyWebServiceEvent(evt2);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} else if (evt.getPropertyName().equals(Cytoscape.NETWORK_LOADED)) {
			String[] message = { "Network loaded.", "Please enter name for new network:" };
			String value = JOptionPane.showInputDialog(Cytoscape.getDesktop(), message,
			                                           "Name new network",
			                                           JOptionPane.QUESTION_MESSAGE);

			if ((value != null) || (value.length() != 0)) {
				final GraphPerspective cyNetwork = Cytoscape.getCurrentNetwork();
				cyNetwork.setTitle(value);
				Cytoscape.getCurrentNetwork().setTitle(value);
				Cytoscape.getDesktop().getNetworkPanel().updateTitle(cyNetwork);

				VisualStyle style = ((NetworkImportWebServiceClient) WebServiceClientManager
				                                                                                                                                                                                                                                                                                                                                                                                                                                    .getClient(selectedClientID))
				                          .getDefaultVisualStyle();
				if(style == null) {
					style = Cytoscape.getVisualMappingManager().getVisualStyle();
				}
				VisualStyle testStyle = Cytoscape.getVisualMappingManager().getCalculatorCatalog()
				                                 .getVisualStyle(style.getName());

				if (testStyle == null) {
					Cytoscape.getVisualMappingManager().getCalculatorCatalog().addVisualStyle(style);
				}

				Cytoscape.getVisualMappingManager().setVisualStyle(style);
				Cytoscape.getNetworkView(cyNetwork.getIdentifier()).setVisualStyle(style.getName());
				Cytoscape.getNetworkView(cyNetwork.getIdentifier()).redrawGraph(false, true);
			}
		}
	}
}
