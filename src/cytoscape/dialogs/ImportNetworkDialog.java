/*
 * NetworkImportDialog.java
 *
 * Created on 2006/05/08, 11:33
 */

package cytoscape.dialogs;

import java.io.File;
import java.io.IOException;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import javax.swing.JDialog;
import javax.swing.JRadioButton;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.net.MalformedURLException;
import java.net.Proxy;
import cytoscape.util.CyFileFilter;
import cytoscape.util.FileUtil;
import cytoscape.data.ImportHandler;
import cytoscape.Cytoscape;
import java.awt.event.KeyListener;
import cytoscape.util.BookmarksUtil;
import java.util.List;
import cytoscape.bookmarks.Bookmarks;
import cytoscape.bookmarks.Category;
import cytoscape.bookmarks.DataSource;


/**
 * 
 * @author kono
 */
public class ImportNetworkDialog extends JDialog implements java.awt.event.ActionListener, KeyListener {

	private boolean status;
	private File[] networkFiles;

    private Bookmarks theBookmarks = null; // get it from session
    private String bookmarkCategory = "network";
	private String URLstr;
	private Proxy proxyServer= null;
    private BookmarkComboBoxEditor bookmarkEditor = new BookmarkComboBoxEditor();
    
	/** Creates new form NetworkImportDialog */
	public ImportNetworkDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		
		setTitle("Import Network");
		initComponents();
		addListeners();

		//By default, import from local
        switchImportView("Local");

		status = false;
		networkFiles = null;

		theBookmarks = Cytoscape.getBookmarks();

    	// if theBookmarks doesnot exist, create an empty one
    	if (theBookmarks == null) {
    		theBookmarks = new Bookmarks();
    		Cytoscape.setBookmarks(theBookmarks);
    	}
    	
    	// if bookmarkCategory "network" does not exist, create a "network" with empty DataSource
    	Category theCategory = BookmarksUtil.getCategory(bookmarkCategory, theBookmarks.getCategory());
    	if (theCategory == null) {
    		theCategory = new Category();
    		theCategory.setName(bookmarkCategory);
    		List<Category> theCategoryList= theBookmarks.getCategory();
    		theCategoryList.add(theCategory);
    	}
 	}
	
	/**
	 * Get first file only.
	 * 
	 * @return
	 */
	public File getFile() {
		if (networkFiles != null && networkFiles.length > 0) {
			return networkFiles[0];
		} else {
			return null;
		}
	}

	/**
	 * Get all files selected.
	 * 
	 * @return
	 */
	public File[] getFiles() {
		return networkFiles;
	}

	public boolean getVSFlag() {
		return chbVisualStyle.isSelected();
	}

	public boolean getStatus() {
		return status;
	}

	public boolean isRemote()
	{
		return rbtRemote.isSelected();
	}
		
	public String getURLStr()
	{
		return URLstr;
	}
	

	public void setProxyServer(Proxy pServer)
	{
		proxyServer = pServer;
	}
	
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        lbTitle = new javax.swing.JLabel();
        rbtnLocal = new javax.swing.JRadioButton();
        rbtRemote = new javax.swing.JRadioButton();
        tfNetworkFile = new javax.swing.JTextField();
        cmbNetworkFile = new javax.swing.JComboBox();
        chbVisualStyle = new javax.swing.JCheckBox();
        btnSelect = new javax.swing.JButton();
        btnPanel = new javax.swing.JPanel();
        btnImport = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAdvanced = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        lbTitle.setFont(new java.awt.Font("Times New Roman", 1, 14));
        lbTitle.setText("Import Network File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        getContentPane().add(lbTitle, gridBagConstraints);

        buttonGroup1.add(rbtnLocal);
        rbtnLocal.setSelected(true);
        rbtnLocal.setText("Local");
        rbtnLocal.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbtnLocal.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 0);
        getContentPane().add(rbtnLocal, gridBagConstraints);

        buttonGroup1.add(rbtRemote);
        rbtRemote.setText("Remote");
        rbtRemote.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbtRemote.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(rbtRemote, gridBagConstraints);

        tfNetworkFile.setText("Please select a network file...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        getContentPane().add(tfNetworkFile, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        getContentPane().add(cmbNetworkFile, gridBagConstraints);

        chbVisualStyle.setText("Build Visual Style from graphics data (for GML only)");
        chbVisualStyle.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chbVisualStyle.setEnabled(false);
        chbVisualStyle.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(chbVisualStyle, gridBagConstraints);

        btnSelect.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        getContentPane().add(btnSelect, gridBagConstraints);

        btnImport.setText("Import");
        btnImport.setName("btnImport");
        btnPanel.add(btnImport);

        btnCancel.setText("Cancel");
        btnCancel.setName("btnCancel");
        btnPanel.add(btnCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 10, 0);
        getContentPane().add(btnPanel, gridBagConstraints);

        btnAdvanced.setText("Advanced");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(btnAdvanced, gridBagConstraints);
                
    	cmbNetworkFile.setRenderer(new MyCellRenderer());
        cmbNetworkFile.setEditor(bookmarkEditor);
        cmbNetworkFile.setEditable(true);        

        pack();
    }// </editor-fold>

    private void addListeners()
    {
        LocalRemoteListener l = new LocalRemoteListener();
        rbtnLocal.addActionListener(l);
        rbtRemote.addActionListener(l);
        
        //ButtonActionListener btnActionListener = new ButtonActionListener();

        btnSelect.addActionListener(this);
        btnAdvanced.addActionListener(this);
        btnCancel.addActionListener(this);
        btnImport.addActionListener(this);
        
        bookmarkEditor.addActionListener(this);
        bookmarkEditor.addKeyListener(this);
    }
    
    private void switchImportView(String pLocation)
    {
    	if (pLocation.equalsIgnoreCase("Local"))
    	{
            //for the case of local import 
            cmbNetworkFile.setVisible(false);
            btnAdvanced.setVisible(false); 
            
            tfNetworkFile.setVisible(true);
            btnSelect.setVisible(true);
    	}
    	else { // Remote
            cmbNetworkFile.setVisible(true);
            btnAdvanced.setVisible(true);    		

            tfNetworkFile.setVisible(false);
            btnSelect.setVisible(false);
            
    		loadBookmarkCMBox();
    	}
    }
	

   	
    private void loadBookmarkCMBox()
    {

        cmbNetworkFile.removeAllItems();

        DefaultComboBoxModel theModel = new DefaultComboBoxModel();

		DataSource firstDataSource = new DataSource(); 
		firstDataSource.setName("");
        firstDataSource.setHref(" Please provide a URL to the network file");

        theModel.addElement(firstDataSource);
        
    	// Extract the URL entries
    	List<DataSource> theDataSourceList = BookmarksUtil.getDataSourceList(bookmarkCategory, theBookmarks.getCategory());    		

        if (theDataSourceList != null) {
        	for (int i =0; i<theDataSourceList.size(); i++)
        	{
        		theModel.addElement(theDataSourceList.get(i));
        	}        	
        }

        cmbNetworkFile.setModel(theModel);
    }

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		status = false;
		this.dispose();
	}

	private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {
		status = true;
		this.dispose();
	}

	private void selectNetworkFileButtonActionPerformed(
			java.awt.event.ActionEvent evt) {

		CyFileFilter[]  tempCFF = (CyFileFilter[]) Cytoscape.getImportHandler()
				.getAllFilters(ImportHandler.GRAPH_NATURE).toArray(
						new CyFileFilter[0]);

		networkFiles = FileUtil.getFiles("Import Network Files", FileUtil.LOAD,
				tempCFF);

		if (networkFiles != null) {
			/*
			 * Accept multiple files
			 */
			StringBuffer fileNameSB = new StringBuffer();
			StringBuffer tooltip = new StringBuffer();
			tooltip.append("<html><body><strong><font color=RED>The following files will be loaded:</font></strong><br>");
			
			for (int i = 0; i < networkFiles.length; i++) {
				fileNameSB.append(networkFiles[i].getAbsolutePath() + ", ");
				tooltip.append("<p>" + networkFiles[i].getAbsolutePath() + "</p>");
				if (networkFiles[i].getName().endsWith(".gml")) {
					chbVisualStyle.setEnabled(true);
				}
			}
			tooltip.append("</body></html>");
			tfNetworkFile.setText(fileNameSB.toString());
			tfNetworkFile.setToolTipText(tooltip.toString());

			btnImport.setEnabled(true);
		}
	}


    public void keyPressed(KeyEvent e) 
    {
    }
    
    public void keyReleased(KeyEvent e) 
    {	
		String tmpStr = bookmarkEditor.getURLstr().trim();
		tmpStr = tmpStr.toUpperCase();
		if (tmpStr.endsWith("GML")) {
			chbVisualStyle.setEnabled(true);
		}
		else {
			chbVisualStyle.setEnabled(false);
		}
    }
    
    public void keyTyped(KeyEvent e) 
    {
    }
    
 	public void actionPerformed(java.awt.event.ActionEvent e)
	{
		Object _actionObject = e.getSource();

		// handle Button events
		if (_actionObject instanceof JButton)
		{
			JButton _btn = (JButton)_actionObject;

			// process radio button events
			if (_btn == btnSelect) {
					
				selectNetworkFileButtonActionPerformed(e);
			}
			else if (_btn == btnAdvanced)
			{
				URLimportAdvancedDialog theAdvDialog = new URLimportAdvancedDialog(this, true, bookmarkCategory, theBookmarks, proxyServer);
				theAdvDialog.setLocationRelativeTo(this);
				theAdvDialog.setPreferredSize(new Dimension(350,400));
				theAdvDialog.pack();
				theAdvDialog.setVisible(true);
				loadBookmarkCMBox();
				proxyServer = theAdvDialog.getProxyServer();
			}
			else if (_btn == btnImport)
			{
				if (rbtnLocal.isSelected()) // local import
				{
					importButtonActionPerformed(e);
				}
				else // case for remote import
				{
					doURLimport(e);
				}
			}
			else if (_btn == btnCancel)
			{
				cancelButtonActionPerformed(e);
			}
		}
		if (_actionObject instanceof JTextField) {
			doURLimport(e);
		}
	}

 	
	private void doURLimport(java.awt.event.ActionEvent e) {
		String theURLstr = bookmarkEditor.getURLstr().trim();
		cytoscape.data.ImportHandler theHandler = Cytoscape.getImportHandler();
		
		File tmpFile = null;
		try {
			tmpFile = theHandler.getNetworkFromURL(theURLstr, proxyServer);
		}
		catch (MalformedURLException e1) {
		    JOptionPane.showMessageDialog(this, "URL error!", "Warning", JOptionPane.INFORMATION_MESSAGE);
		}		
		catch (IOException e2) {
		    JOptionPane.showMessageDialog(this, "Failed to connect to the remote server!", "Warning", JOptionPane.INFORMATION_MESSAGE);
		}
		
		if (tmpFile == null) {
			return;
		}
		networkFiles = new File[1];
		networkFiles[0] = tmpFile;
			 
		importButtonActionPerformed(e);
	}
	
	
    class LocalRemoteListener implements java.awt.event.ActionListener
    {
    	public void actionPerformed(java.awt.event.ActionEvent e)
    	{
    		Object _actionObject = e.getSource();

    		// handle radioButton events
    		if (_actionObject instanceof JRadioButton)
    		{
    			JRadioButton _rbt = (JRadioButton)_actionObject;

    			// process radio button events
    			if (_rbt == rbtnLocal) {
    				switchImportView("Local");	
    			}
    			else { // from rbtRemote
    				switchImportView("Remote");
    			}
    			pack();
    		}
    	} //actionPerformed()
    }

    
    class MyCellRenderer extends JLabel implements ListCellRenderer {
        public MyCellRenderer() {
            setOpaque(true);
        }
        public Component getListCellRendererComponent(
            JList list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus)
        {
        	DataSource dataSource = (DataSource)value;
            setText(dataSource.getName());
            if (isSelected) {
                    if (0 < index) {
                    list.setToolTipText(dataSource.getHref());
                }
            }
            return this;
        }
    }//MyCellRenderer

    
    class BookmarkComboBoxEditor implements javax.swing.ComboBoxEditor {
    	DataSource theDataSource = new DataSource();
    	JTextField tfInput = new JTextField("Please provide a URL to the network file");
    	
    	public String getURLstr() {
    		return tfInput.getText();
    	}
    	public void addActionListener(ActionListener l) {
    		tfInput.addActionListener(l);	
    	}
    	public void addKeyListener(KeyListener l)
    	{
    		tfInput.addKeyListener(l);
    	}
    	public Component getEditorComponent()  {
    		return tfInput;
    	}
    	
    	public Object getItem()  {
    		return theDataSource;
    	}
    	public void removeActionListener(ActionListener l)  {
    		
    	}
    	
    	public void selectAll()  {
    		
    	}
    	
    	public void setItem(Object anObject) {
    		if (anObject == null){
    			return;	
    		}
    		if (anObject instanceof DataSource) {
    			theDataSource = (DataSource) anObject;
        		tfInput.setText(theDataSource.getHref());    			
    		}
    	}
    }//BookmarkComboBoxEditor

    
    // Variables declaration - do not modify
    private javax.swing.JButton btnAdvanced;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnImport;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton btnSelect;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chbVisualStyle;
    private javax.swing.JComboBox cmbNetworkFile;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JRadioButton rbtRemote;
    private javax.swing.JRadioButton rbtnLocal;
    private javax.swing.JTextField tfNetworkFile;
    // End of variables declaration
}
