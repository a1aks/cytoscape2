// EdgeVizTest.java
// todo (pshannon, 2002/02/28):  edgecolor for pp and pd works.  try it next
//                               for continuous values, stealing spectrum assignment
//                               code from VizAttributes.  then on to thickness,
//                               style, and decorations.
//------------------------------------------------------------------------------
// $Revision$
// $Date$
// $Author$
//--------------------------------------------------------------------------------------
package cytoscape.vizmap.unitTests;
//--------------------------------------------------------------------------------------
import junit.framework.*;
import java.io.*;

import cytoscape.vizmap.EdgeViz;

import cytoscape.GraphObjAttributes;
import java.awt.Color;
import java.util.*;
//------------------------------------------------------------------------------
public class EdgeVizTest extends TestCase {


//------------------------------------------------------------------------------
public EdgeVizTest (String name) 
{
  super (name);
}
//------------------------------------------------------------------------------
public void setUp () throws Exception
{
}
//------------------------------------------------------------------------------
public void tearDown () throws Exception
{
}
//------------------------------------------------------------------------------
/**
 * make sure all defaults are returned
 */
public void testDefaultCtor () throws Exception
{ 
  System.out.println ("testDefaultCtor");
  EdgeViz viz = new EdgeViz ();

  assertTrue (viz.getAttributeController (EdgeViz.COLOR) == null);
  assertTrue (viz.getAttributeController (EdgeViz.LINE_STYLE) == null);
  assertTrue (viz.getAttributeController (EdgeViz.THICKNESS) == null);
  assertTrue (viz.getAttributeController (EdgeViz.SOURCE_DECORATION) == null);
  assertTrue (viz.getAttributeController (EdgeViz.TARGET_DECORATION) == null);

  String edgeName = "GAL4::GAL1";

    // do we get the default values back?
  assertTrue (viz.getEdgeColor (edgeName) == Color.black);
  assertTrue (viz.getLineStyle (edgeName).equals ("solid"));
  assertTrue (viz.getLineThickness(edgeName) == 1);
  assertTrue (viz.getSourceDecoration(edgeName).equals ("none"));
  assertTrue (viz.getTargetDecoration(edgeName).equals ("none"));

} // testDefaultCtor
//-------------------------------------------------------------------------
public void testArgCtor () throws Exception
{ 
  System.out.println ("testArgCtor");
  GraphObjAttributes edgeData = createSampleDataAttributes ();

  EdgeViz viz = new EdgeViz (edgeData);

  assertTrue (viz.getAttributeController (EdgeViz.COLOR) == null);
  assertTrue (viz.getAttributeController (EdgeViz.LINE_STYLE) == null);
  assertTrue (viz.getAttributeController (EdgeViz.THICKNESS) == null);
  assertTrue (viz.getAttributeController (EdgeViz.SOURCE_DECORATION) == null);
  assertTrue (viz.getAttributeController (EdgeViz.TARGET_DECORATION) == null);

  String edgeName = "GAL4::GAL1";

    // do we get the default values back?
  assertTrue (viz.getEdgeColor (edgeName) == Color.black);
  assertTrue (viz.getLineStyle (edgeName).equals ("solid"));
  assertTrue (viz.getLineThickness (edgeName) == 1);
  assertTrue (viz.getSourceDecoration (edgeName).equals ("none"));
  assertTrue (viz.getTargetDecoration (edgeName).equals ("none"));

} // testArgCtor
//-------------------------------------------------------------------------
/**
 * edges will often be colored as a function of an attribute with only
 * a few enumerated values:  for instance, the edge may indicate a
 * protein-protein interaction ("pp") or a protein-dna interaction ("pd") 
 * make sure that this works.
 */
public void testColorControlForDiscreteAttribute () throws Exception
{ 
  System.out.println ("testColorControlForDiscreteAttribute");
  GraphObjAttributes edgeData = createSampleDataAttributes ();
    // give EdgeViz the names of all edge attributes, and the values.
    // EdgeViz will ignore the edge names which are also included
    // in edgeData 
  EdgeViz viz = new EdgeViz (edgeData);

    // our edge data has an attribute called "interaction" with String 
    // values "pp" and "pd" . specify that here:
  String attributeName = "interaction";
  Class stringClass = "string".getClass ();
  viz.setAttributeController (EdgeViz.COLOR, attributeName, stringClass);
                            
  assertTrue (viz.getAttributeController(EdgeViz.COLOR).equals (attributeName));
  assertTrue (viz.getDataClassOfAttribute(EdgeViz.COLOR).equals(stringClass));
  assertTrue (viz.getDataDomainType(EdgeViz.COLOR)==(EdgeViz.DISCRETE));
  assertTrue (viz.getDataDomainRange(EdgeViz.COLOR)==2);

  assertTrue (viz.countValuesInDiscreteData (EdgeViz.COLOR) == 2);
  viz.setDiscreteColorAttribute ("pp", Color.blue);
  viz.setDiscreteColorAttribute ("pd", Color.yellow);

  String edgeValue = (String) edgeData.getValue ("interaction", "GAL4::GAL1");
  assertTrue (viz.getEdgeColor (edgeValue) == Color.blue);

  edgeValue = (String) edgeData.getValue ("interaction", "GAL4::GAL80");
  assertTrue (viz.getEdgeColor (edgeValue) == Color.yellow);

  
} // testColorControlForDiscreteAttribute
//-------------------------------------------------------------------------
/**
 * read a test properties file which maps edge colors to interaction type,
 * and make sure that those values are returned properly in calls to
 * 'getEdgeColor'
 */
public void testAssignColorAttributesFromProperties () throws Exception
{ 
  System.out.println ("testAssignColorAttributesFromProperties");

  GraphObjAttributes edgeData = createSampleDataAttributes ();

    // load test properties from file
  Properties testProps = new Properties ();
  File testPropsFile = new File ("edgeVizTest.props");
  assertTrue (testPropsFile.canRead ());
  FileInputStream istream = new FileInputStream (testPropsFile);
  testProps.load (istream);

  String key = "edge.color.controller";
  assertTrue (testProps.containsKey (key));
  String edgeColorController = testProps.getProperty (key);
  assertTrue (edgeColorController.equals ("interaction"));

  EdgeViz viz = new EdgeViz (testProps);  

  viz.setAttributeController (EdgeViz.COLOR, edgeColorController, "string".getClass ());
  assertTrue (viz.getAttributeController(EdgeViz.COLOR).equals (edgeColorController));

   // now get the interaction values, and the colors associated with them:
   // edge.color.map.interaction.pp=255,0,0
   // edge.color.map.interaction.pd=255,255,0

  String colorSpecifyingKey = "edge.color.map.interaction";
  Enumeration eProps = testProps.propertyNames ();

  int keysFound = 0;
  while (eProps.hasMoreElements()) {
    key = (String) eProps.nextElement();
    if (key.startsWith (colorSpecifyingKey)) {
      String value = testProps.getProperty (key);
      String interactionType = key.substring (colorSpecifyingKey.length () + 1);
      viz.setDiscreteColorAttribute (interactionType, EdgeViz.parseRGBText (value));
      keysFound++;
      } // if
    } // while

  assertTrue (keysFound >= 2);
  assertTrue (viz.getEdgeColor ("pp").equals (Color.blue));
  assertTrue (viz.getEdgeColor ("pd").equals (Color.yellow));
  //System.out.println ("pd source decoration: " + viz.getSourceDecoration ("pd"));
  System.out.println (viz);
  //assertTrue (viz.getSourceDecoration ("pd").equals ("arrow"));
  //assertTrue (viz.getSourceDecoration ("pp").equals ("none"));

} // testAssignColorAttributesFromProperties
//-------------------------------------------------------------------------
/**
 * read properties and call the EdgeViz (Properties) ctor.
 */
public void testPropsCtor () throws Exception
{ 
  System.out.println ("testPropsCtor");
  Properties defaultAppProps = new Properties ();
  File defaultPropsFile = new File ("cytoscape.props");

  if (defaultPropsFile.canRead ()) {
    FileInputStream in = new FileInputStream (defaultPropsFile);
    defaultAppProps.load (in);
    }

  Properties combinedProps = new Properties (defaultAppProps);
    // combinedProps now has <defaultAppProps> as its fallback, 
    // defining all values not present in the file "user.props"

  File userPropsFile = new File ("edgeVizTest.props");
  if (userPropsFile.canRead ()) {
    FileInputStream in = new FileInputStream (userPropsFile);
    combinedProps.load (in);
    } // if canRead

  EdgeViz viz = new EdgeViz (combinedProps);

  assertTrue (viz.getEdgeColor ("pp").equals (Color.blue));
  assertTrue (viz.getEdgeColor ("pd").equals (Color.yellow));

} // testPropsCtor
//-------------------------------------------------------------------------
/**
 *  
 */
//-------------------------------------------------------------------------
/**
 * create 5 data attributes for 4 edges, enough to test all 5 visual 
 * attributes of an edge.
 */
private GraphObjAttributes createSampleDataAttributes ()
{
  GraphObjAttributes edgeData = new GraphObjAttributes ();

  edgeData.add ("interaction", "GAL4::GAL1",   "pp");
  edgeData.add ("interaction", "GAL4::CYC1",   "pp");
  edgeData.add ("interaction", "GAL4::GAL2",   "pp");
  edgeData.add ("interaction", "GAL4::GAL80",  "pd");

  edgeData.add ("confidence", "GAL4::GAL1",  0.3);
  edgeData.add ("confidence", "GAL4::CYC1",  0.1);
  edgeData.add ("confidence", "GAL4::GAL2",  0.9);
  edgeData.add ("confidence", "GAL4::GAL80", 1.0);

  return edgeData;

} // createSampleDataAttributes
//-------------------------------------------------------------------------
public static void main (String[] args) 
{
  junit.textui.TestRunner.run (new TestSuite (EdgeVizTest.class));
}
//------------------------------------------------------------------------------
} // EdgeVizTest
