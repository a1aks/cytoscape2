package cytoscape.util;

import org.jdom.input.SAXBuilder;
import org.jdom.Document;
import org.jdom.JDOMException;
import org.jdom.Element;
import org.jdom.output.XMLOutputter;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 * Configures the Mac OS X Info.plist file associated with Cytoscape.
 * This enables us to run a "Macified" version of Cytoscape, with its
 * own icon, integrated menus, etc.  The plist file is part of the package
 * contents automatically generated by the Mac OS X Jar Bundler application.
 *
 * The existing Info.plist file checked into CVS provides preset
 * configuration settings.  This class modified the existing file by adding
 * all JAR files in cytoscape/lib to the plist file.  It does so be replacing
 * the JAR_ARRAY element with the correct array element, and then adding
 * all the correct JAR files.  By automating this task, we can easily
 * update the Mac OS X application as part of our regular build process.
 *
 * Full documentation on the Mac OS X Jar Bundler is available at:
 * http://developer.apple.com/documentation/Java/Conceptual/Jar_Bundler/
 *
 * @author Ethan Cerami
 */
public class MacAppConfig {

    /**
     * Name of Jar Bundler Configuration File.
     */
    private String configFile = "Cytoscape.app/Contents/Info.plist";

    /**
     * Configures the Info.plist list with all cytoscape/*.jar files.
     * @throws IOException Error Reading Document.
     * @throws JDOMException Error Processing XML Document.
     */
    public void configure () throws IOException, JDOMException {

        // Parse Info.plist file
        Document doc = getConfiguration();

        //  Get all files in cytocape/lib
        String[] files = getJarList();

        //  Get the Correct JAR_ARRAY Element Placeholder.
        Element root = doc.getRootElement();
        Element dict = root.getChild("dict");
        dict = dict.getChild("dict");
        Element array = dict.getChild("JAR_ARRAY");
        array.setName("array");
        addJars(files, array);

        //  Overwrite existing Info.plist file.
        XMLOutputter outputter = new XMLOutputter("     ", false);
        FileWriter writer = new FileWriter(configFile);
        outputter.output(doc, writer);
        writer.close();
        System.out.println("File is now updated with correct JARs:  " +
                configFile);
    }

    /**
     * Add all JAR Files to Info.plist
     * @param files Array of Files in cytocape/lib.
     * @param array Array Element in Info.plist.
     */
    private void addJars(String[] files, Element array) {
        for (int i=0; i<files.length; i++) {
            String file = files[i];
            if (file.endsWith("jar")) {
                Element jar = new Element ("string");
                jar.setText("$JAVAROOT/" + file);
                array.addContent(jar);
                array.addContent("\n");
            }
        }
    }

    /**
     * Gets all Files in cytoscape/lib
     * @return Array of File Strings.
     */
    private String[] getJarList() {
        File dir = new File ("lib");
        String files[] = dir.list();
        return files;
    }

    /**
     * Parses Info.Plist file into JDOM Document object.
     * @return JDOM Document Object.
     * @throws IOException Error Reading Document.
     * @throws JDOMException Error Processing XML Document.
     */
    private Document getConfiguration()
            throws IOException, JDOMException {
        Document  doc = null;
        try {
            FileReader reader = new FileReader (configFile);
            SAXBuilder saxBuilder = new SAXBuilder ();
            doc = saxBuilder.build(reader);
        } catch (FileNotFoundException e) {
            System.out.println("Cannot find:  " + configFile);
            System.out.println("Try running:  'ant mac' first.");
            System.exit(-1);
        }
        return doc;
    }

    /**
     * Main Method.
     * @param args Command Line Arguments.
     * @throws Exception All Exceptions.
     */
    public static void main(String[] args) throws Exception {
        MacAppConfig mac = new MacAppConfig();
        mac.configure();
    }
}