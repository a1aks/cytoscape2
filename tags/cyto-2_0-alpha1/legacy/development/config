//--------------------------------------------------------------------------
// $Revision$
// $Date$
// $Author$
//--------------------------------------------------------------------------

One of the things that needs redesign in Cytoscape is the management of
preferences and what data/plugins are loaded at startup. So, I'd like to start
a discussion on how to deal with this. What follows is a description of the
problem and my proposed solution, as far as it goes. I'd be interested in any
comments; once we converge on what to do, we can start planning to do it.



At startup, Cytoscape needs several different pieces of information. These
include:

1) values of preferences like the species name, whether undo is enabled, and
which visual style to use;
2) locations of standard files, like the vizmap.props file holding visual
mappings;
3) optionally, location of a sif or gml file to load as the graph, and/or an
expression data file;
4) optionally other node and edge attribute files;
5) optionally, a bio data server;
6) a list of plugins to load;
7) eventually, who knows what other sources of data/information.

Currently, some of these are specified in various files with hard-coded names;
some are specified on the command line, or in a project file that refers to
other files, and all of these are mushed together into a single
CytoscapeConfig object.

What we want to do is provide a user interface allowing the user to set all of
this information from within the program, and to save those settings so that
they will be used the next time the user runs Cytoscape. For example, the user
should be able to set the visual style he wants to use, so that the next time
Cytoscape starts up it will use that visual style. Additionally, it would be
nice to clean up how all of this stuff is declared, as it's currently
confusing right now to have things specified in many different files and
formats.

So, what I'd propose:

1) Make sure that CytoscapeConfig contains all the information it needs to
contain. This includes both preferences (basically #1 and #2 above) as well as
startup data/plugins (#3-6).


2) Write code allowing a CytoscapeConfig to be written out to file and read in
again, so that the whole configuration can be saved and restored. This means
CytoscapeConfig should itself hold the name of the file that it came from.


3) Have Cytoscape maintain three different CytoscapeConfig objects.
The first holds the system defaults, is constructed by Cytoscape itself, and
shouldn't be modifiable by the user. This would likely only hold preferences,
not data.
The second is the user's defaults, which are read from a file in the user's
home directory and saved to the same file.
The third is the project-specific settings, which are read from the project
file and saved to the same file.

Cytoscape should stack these objects, so if, for example, some code wants to
know what visual style to use, Cytoscape first checks the project-specific
settings to see if one is defined there, if not check the user's default
settings, etc.

If there's no project file, we can construct a CytoscapeConfig (as much as
possible) from command-line arguments, much the same way we do now, and not
have those settings saved by default. The user can specify a filename later
if they want to save them.

I'm not sure how to handle both a project file and command-line arguments.
Should the values specified on the command line be saved into the
project-specific settings, or should there be a fourth CytoscapeConfig object
that keeps the command-line options separate from what's specified in the
project file?

A somewhat appealing alternative would be to scrap command-line support
altogether in favor of the project file. This requires an extra step for
current command-line users (write and save the plain-text project file, then
run Cytoscape with that file) but saves us the trouble of having two different
parsers. I don't know how people feel about this.


4) Write a user interface allowing the user to set the values in each of the
CytoscapeConfig objects. For example, the user could set a data file to load
only for this particular project, or to always load that data (say, the
location of a standard bio data server).


5) In what's described so far, the config objects are only changed explicitly
by the user (via an interface), or explicitly by a plugin that accesses the
configuration objects. How much should the project-specific configuration
respond to general events in Cytoscape? For example, if the user modifies the
graph and saves it to a new file, should the graph-saving code automatically
update the project-specific configuration to reflect the new filename? This
might be more convenient for the user, but is easy to break if just one piece
of code forgets to modify the configuration as it does its work.

